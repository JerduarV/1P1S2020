
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package GramaticaFlexCup;

import Editor.VentanaErrores;
import java.util.LinkedList;
import Interprete.NodoAST;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\006\005\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\011\011\000\002\011\014\000\002\012\007" +
    "\000\002\012\006\000\002\017\004\000\002\017\003\000" +
    "\002\016\004\000\002\016\003\000\002\020\005\000\002" +
    "\020\004\000\002\013\007\000\002\021\011\000\002\021" +
    "\011\000\002\021\010\000\002\021\010\000\002\024\006" +
    "\000\002\024\005\000\002\025\005\000\002\025\003\000" +
    "\002\026\003\000\002\026\003\000\002\022\005\000\002" +
    "\022\003\000\002\023\003\000\002\023\005\000\002\014" +
    "\011\000\002\014\010\000\002\015\011\000\002\005\006" +
    "\000\002\005\005\000\002\007\007\000\002\007\010\000" +
    "\002\010\004\000\002\010\004\000\002\027\005\000\002" +
    "\027\005\000\002\027\003\000\002\027\004\000\002\027" +
    "\003\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\003\000\002\031\004\000\002\031\004\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\003" +
    "\000\002\031\005\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\032" +
    "\007\000\002\034\004\000\002\034\003\000\002\036\004" +
    "\000\002\036\003\000\002\035\005\000\002\035\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\024\016\027\025\026\027\005\031\023\032" +
    "\004\033\010\034\030\035\007\040\032\001\002\000\036" +
    "\002\uffec\010\uffec\012\260\016\uffec\025\uffec\027\uffec\030" +
    "\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\040\uffec" +
    "\041\uffec\001\002\000\004\005\236\001\002\000\034\002" +
    "\ufff5\010\ufff5\016\ufff5\025\ufff5\027\ufff5\030\ufff5\031\ufff5" +
    "\032\ufff5\033\ufff5\034\ufff5\035\ufff5\040\ufff5\041\ufff5\001" +
    "\002\000\004\005\230\001\002\000\004\005\224\001\002" +
    "\000\034\002\ufffa\010\ufffa\016\ufffa\025\ufffa\027\ufffa\030" +
    "\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\040\ufffa" +
    "\041\ufffa\001\002\000\034\002\ufff4\010\ufff4\016\ufff4\025" +
    "\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\035\ufff4\040\ufff4\041\ufff4\001\002\000\034\002\ufff8\010" +
    "\ufff8\016\ufff8\025\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8" +
    "\033\ufff8\034\ufff8\035\ufff8\040\ufff8\041\ufff8\001\002\000" +
    "\034\002\ufff9\010\ufff9\016\ufff9\025\ufff9\027\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\040\ufff9\041" +
    "\ufff9\001\002\000\034\002\ufff3\010\ufff3\016\ufff3\025\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035" +
    "\ufff3\040\ufff3\041\ufff3\001\002\000\034\002\ufffb\010\ufffb" +
    "\016\ufffb\025\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033" +
    "\ufffb\034\ufffb\035\ufffb\040\ufffb\041\ufffb\001\002\000\004" +
    "\002\223\001\002\000\034\002\ufffe\010\ufffe\016\ufffe\025" +
    "\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe" +
    "\035\ufffe\040\ufffe\041\ufffe\001\002\000\034\002\ufff2\010" +
    "\ufff2\016\ufff2\025\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\035\ufff2\040\ufff2\041\ufff2\001\002\000" +
    "\034\002\ufffc\010\ufffc\016\ufffc\025\ufffc\027\ufffc\030\ufffc" +
    "\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\040\ufffc\041" +
    "\ufffc\001\002\000\036\002\uffea\010\uffea\012\222\016\uffea" +
    "\025\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034" +
    "\uffea\035\uffea\040\uffea\041\uffea\001\002\000\026\002\000" +
    "\016\027\025\026\027\005\031\023\032\004\033\010\034" +
    "\030\035\007\040\032\001\002\000\034\002\ufff6\010\ufff6" +
    "\016\ufff6\025\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033" +
    "\ufff6\034\ufff6\035\ufff6\040\ufff6\041\ufff6\001\002\000\004" +
    "\005\212\001\002\000\006\004\157\005\075\001\002\000" +
    "\004\007\145\001\002\000\034\002\ufff7\010\ufff7\016\ufff7" +
    "\025\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034" +
    "\ufff7\035\ufff7\040\ufff7\041\ufff7\001\002\000\030\005\042" +
    "\016\051\022\046\023\053\024\050\042\052\043\040\044" +
    "\037\045\054\046\034\065\041\001\002\000\106\002\uffb9" +
    "\006\uffb9\010\uffb9\011\uffb9\012\uffb9\014\uffb9\015\uffb9\016" +
    "\uffb9\017\uffb9\025\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\040\uffb9\041\uffb9\045\uffb9\046" +
    "\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9" +
    "\055\uffb9\056\uffb9\057\uffb9\060\uffb9\063\uffb9\064\uffb9\066" +
    "\uffb9\001\002\000\026\005\042\016\051\022\046\023\053" +
    "\024\050\042\052\043\040\044\037\045\054\046\034\001" +
    "\002\000\106\002\uffc4\006\uffc4\010\uffc4\011\uffc4\012\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\017\uffc4\025\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\040\uffc4" +
    "\041\uffc4\045\057\046\060\047\063\050\062\051\061\052" +
    "\056\053\131\054\133\055\130\056\132\057\135\060\134" +
    "\063\uffc4\064\uffc4\066\uffc4\001\002\000\056\002\uffcb\006" +
    "\uffcb\010\uffcb\011\uffcb\012\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\025\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\040\uffcb\041\uffcb\063\uffcb\064\uffcb" +
    "\066\uffcb\001\002\000\106\002\uffb5\006\uffb5\010\uffb5\011" +
    "\uffb5\012\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\025\uffb5" +
    "\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\040\uffb5\041\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5" +
    "\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057" +
    "\uffb5\060\uffb5\063\uffb5\064\uffb5\066\uffb5\001\002\000\106" +
    "\002\uffb4\006\uffb4\010\uffb4\011\uffb4\012\uffb4\014\uffb4\015" +
    "\uffb4\016\uffb4\017\uffb4\025\uffb4\027\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\040\uffb4\041\uffb4\045" +
    "\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4" +
    "\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\063\uffb4\064" +
    "\uffb4\066\uffb4\001\002\000\030\005\042\016\051\022\046" +
    "\023\053\024\050\042\052\043\040\044\037\045\054\046" +
    "\034\065\041\001\002\000\030\005\042\016\051\022\046" +
    "\023\053\024\050\042\052\043\040\044\037\045\054\046" +
    "\034\065\041\001\002\000\106\002\uffb8\006\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\025" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\035\uffb8\040\uffb8\041\uffb8\045\uffb8\046\uffb8\047\uffb8\050" +
    "\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8" +
    "\057\uffb8\060\uffb8\063\uffb8\064\uffb8\066\uffb8\001\002\000" +
    "\044\002\uffe8\010\uffe8\012\124\016\uffe8\025\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\040" +
    "\uffe8\041\uffe8\063\100\064\103\066\101\001\002\000\106" +
    "\002\uffbb\006\uffbb\010\uffbb\011\uffbb\012\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\025\uffbb\027\uffbb\030\uffbb\031\uffbb" +
    "\032\uffbb\033\uffbb\034\uffbb\035\uffbb\040\uffbb\041\uffbb\045" +
    "\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb" +
    "\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\063\uffbb\064" +
    "\uffbb\066\uffbb\001\002\000\106\002\uffb7\006\uffb7\010\uffb7" +
    "\011\uffb7\012\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\025" +
    "\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\040\uffb7\041\uffb7\045\uffb7\046\uffb7\047\uffb7\050" +
    "\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7" +
    "\057\uffb7\060\uffb7\063\uffb7\064\uffb7\066\uffb7\001\002\000" +
    "\056\002\uffcd\006\uffcd\010\uffcd\011\uffcd\012\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\025\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\040\uffcd\041\uffcd" +
    "\063\uffcd\064\uffcd\066\uffcd\001\002\000\106\002\uffb3\006" +
    "\uffb3\010\uffb3\011\uffb3\012\uffb3\014\uffb3\015\uffb3\016\uffb3" +
    "\017\uffb3\025\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033" +
    "\uffb3\034\uffb3\035\uffb3\040\uffb3\041\uffb3\045\uffb3\046\uffb3" +
    "\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055" +
    "\uffb3\056\uffb3\057\uffb3\060\uffb3\063\uffb3\064\uffb3\066\uffb3" +
    "\001\002\000\114\002\uffaf\005\075\006\uffaf\010\uffaf\011" +
    "\uffaf\012\uffaf\013\072\014\uffaf\015\uffaf\016\uffaf\017\uffaf" +
    "\020\076\025\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033" +
    "\uffaf\034\uffaf\035\uffaf\040\uffaf\041\uffaf\045\uffaf\046\uffaf" +
    "\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055" +
    "\uffaf\056\uffaf\057\uffaf\060\uffaf\063\uffaf\064\uffaf\066\uffaf" +
    "\001\002\000\106\002\uffb6\006\uffb6\010\uffb6\011\uffb6\012" +
    "\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\025\uffb6\027\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\040" +
    "\uffb6\041\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6" +
    "\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060" +
    "\uffb6\063\uffb6\064\uffb6\066\uffb6\001\002\000\106\002\uffb2" +
    "\006\uffb2\010\uffb2\011\uffb2\012\uffb2\014\uffb2\015\uffb2\016" +
    "\uffb2\017\uffb2\025\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\040\uffb2\041\uffb2\045\uffb2\046" +
    "\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\057\uffb2\060\uffb2\063\uffb2\064\uffb2\066" +
    "\uffb2\001\002\000\026\005\042\016\051\022\046\023\053" +
    "\024\050\042\052\043\040\044\037\045\054\046\034\001" +
    "\002\000\106\002\uffc2\006\uffc2\010\uffc2\011\uffc2\012\uffc2" +
    "\014\uffc2\015\uffc2\016\uffc2\017\uffc2\025\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\040\uffc2" +
    "\041\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\061\052" +
    "\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2" +
    "\063\uffc2\064\uffc2\066\uffc2\001\002\000\026\005\042\016" +
    "\051\022\046\023\053\024\050\042\052\043\040\044\037" +
    "\045\054\046\034\001\002\000\026\005\042\016\051\022" +
    "\046\023\053\024\050\042\052\043\040\044\037\045\054" +
    "\046\034\001\002\000\026\005\042\016\051\022\046\023" +
    "\053\024\050\042\052\043\040\044\037\045\054\046\034" +
    "\001\002\000\026\005\042\016\051\022\046\023\053\024" +
    "\050\042\052\043\040\044\037\045\054\046\034\001\002" +
    "\000\026\005\042\016\051\022\046\023\053\024\050\042" +
    "\052\043\040\044\037\045\054\046\034\001\002\000\026" +
    "\005\042\016\051\022\046\023\053\024\050\042\052\043" +
    "\040\044\037\045\054\046\034\001\002\000\106\002\uffbf" +
    "\006\uffbf\010\uffbf\011\uffbf\012\uffbf\014\uffbf\015\uffbf\016" +
    "\uffbf\017\uffbf\025\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\040\uffbf\041\uffbf\045\uffbf\046" +
    "\uffbf\047\uffbf\050\uffbf\051\061\052\uffbf\053\uffbf\054\uffbf" +
    "\055\uffbf\056\uffbf\057\uffbf\060\uffbf\063\uffbf\064\uffbf\066" +
    "\uffbf\001\002\000\106\002\uffbe\006\uffbe\010\uffbe\011\uffbe" +
    "\012\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\025\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\040\uffbe\041\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051" +
    "\061\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe" +
    "\060\uffbe\063\uffbe\064\uffbe\066\uffbe\001\002\000\104\002" +
    "\uffbd\006\uffbd\010\uffbd\011\uffbd\012\uffbd\014\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\025\uffbd\027\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\040\uffbd\041\uffbd\045\uffbd" +
    "\046\uffbd\047\uffbd\050\uffbd\052\uffbd\053\uffbd\054\uffbd\055" +
    "\uffbd\056\uffbd\057\uffbd\060\uffbd\063\uffbd\064\uffbd\066\uffbd" +
    "\001\002\000\106\002\uffc0\006\uffc0\010\uffc0\011\uffc0\012" +
    "\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\025\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\040" +
    "\uffc0\041\uffc0\045\uffc0\046\uffc0\047\063\050\062\051\061" +
    "\052\056\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060" +
    "\uffc0\063\uffc0\064\uffc0\066\uffc0\001\002\000\106\002\uffc1" +
    "\006\uffc1\010\uffc1\011\uffc1\012\uffc1\014\uffc1\015\uffc1\016" +
    "\uffc1\017\uffc1\025\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1" +
    "\033\uffc1\034\uffc1\035\uffc1\040\uffc1\041\uffc1\045\uffc1\046" +
    "\uffc1\047\063\050\062\051\061\052\056\053\uffc1\054\uffc1" +
    "\055\uffc1\056\uffc1\057\uffc1\060\uffc1\063\uffc1\064\uffc1\066" +
    "\uffc1\001\002\000\106\002\uffbc\006\uffbc\010\uffbc\011\uffbc" +
    "\012\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\025\uffbc\027" +
    "\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc" +
    "\040\uffbc\041\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051" +
    "\061\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc" +
    "\060\uffbc\063\uffbc\064\uffbc\066\uffbc\001\002\000\030\005" +
    "\042\016\051\022\046\023\053\024\050\042\052\043\040" +
    "\044\037\045\054\046\034\065\041\001\002\000\112\002" +
    "\uffb0\006\uffb0\010\uffb0\011\uffb0\012\uffb0\013\072\014\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\020\076\025\uffb0\027\uffb0\030" +
    "\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\040\uffb0" +
    "\041\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052" +
    "\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0" +
    "\063\uffb0\064\uffb0\066\uffb0\001\002\000\112\002\uffad\006" +
    "\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad" +
    "\016\uffad\017\uffad\020\uffad\025\uffad\027\uffad\030\uffad\031" +
    "\uffad\032\uffad\033\uffad\034\uffad\035\uffad\040\uffad\041\uffad" +
    "\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053" +
    "\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\063\uffad" +
    "\064\uffad\066\uffad\001\002\000\034\005\042\006\112\016" +
    "\051\022\046\023\053\024\050\041\115\042\052\043\040" +
    "\044\037\045\054\046\034\065\041\001\002\000\030\005" +
    "\042\016\051\022\046\023\053\024\050\042\052\043\040" +
    "\044\037\045\054\046\034\065\041\001\002\000\012\017" +
    "\102\063\100\064\103\066\101\001\002\000\030\005\042" +
    "\016\051\022\046\023\053\024\050\042\052\043\040\044" +
    "\037\045\054\046\034\065\041\001\002\000\030\005\042" +
    "\016\051\022\046\023\053\024\050\042\052\043\040\044" +
    "\037\045\054\046\034\065\041\001\002\000\112\002\uffab" +
    "\006\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015" +
    "\uffab\016\uffab\017\uffab\020\uffab\025\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\040\uffab\041" +
    "\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab" +
    "\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\063" +
    "\uffab\064\uffab\066\uffab\001\002\000\030\005\042\016\051" +
    "\022\046\023\053\024\050\042\052\043\040\044\037\045" +
    "\054\046\034\065\041\001\002\000\056\002\uffcf\006\uffcf" +
    "\010\uffcf\011\uffcf\012\uffcf\014\uffcf\015\uffcf\016\uffcf\017" +
    "\uffcf\025\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\040\uffcf\041\uffcf\063\100\064\uffcf\066" +
    "\uffcf\001\002\000\012\015\106\063\100\064\103\066\101" +
    "\001\002\000\030\005\042\016\051\022\046\023\053\024" +
    "\050\042\052\043\040\044\037\045\054\046\034\065\041" +
    "\001\002\000\056\002\uffb1\006\uffb1\010\uffb1\011\uffb1\012" +
    "\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\025\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\040" +
    "\uffb1\041\uffb1\063\100\064\103\066\101\001\002\000\056" +
    "\002\uffce\006\uffce\010\uffce\011\uffce\012\uffce\014\uffce\015" +
    "\uffce\016\uffce\017\uffce\025\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\040\uffce\041\uffce\063" +
    "\uffce\064\uffce\066\uffce\001\002\000\006\006\uffdf\011\uffdf" +
    "\001\002\000\106\002\uffe1\006\uffe1\010\uffe1\011\uffe1\012" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\025\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\040" +
    "\uffe1\041\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060" +
    "\uffe1\063\uffe1\064\uffe1\066\uffe1\001\002\000\006\006\117" +
    "\011\116\001\002\000\014\006\uffdd\011\uffdd\063\100\064" +
    "\103\066\101\001\002\000\006\006\uffde\011\uffde\001\002" +
    "\000\032\005\042\016\051\022\046\023\053\024\050\041" +
    "\115\042\052\043\040\044\037\045\054\046\034\065\041" +
    "\001\002\000\106\002\uffe2\006\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\025\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\040" +
    "\uffe2\041\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2" +
    "\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060" +
    "\uffe2\063\uffe2\064\uffe2\066\uffe2\001\002\000\006\006\uffe0" +
    "\011\uffe0\001\002\000\112\002\uffae\006\uffae\010\uffae\011" +
    "\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae" +
    "\020\uffae\025\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033" +
    "\uffae\034\uffae\035\uffae\040\uffae\041\uffae\045\uffae\046\uffae" +
    "\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055" +
    "\uffae\056\uffae\057\uffae\060\uffae\063\uffae\064\uffae\066\uffae" +
    "\001\002\000\012\014\123\063\100\064\103\066\101\001" +
    "\002\000\112\002\uffac\006\uffac\010\uffac\011\uffac\012\uffac" +
    "\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac\025" +
    "\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac" +
    "\035\uffac\040\uffac\041\uffac\045\uffac\046\uffac\047\uffac\050" +
    "\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac" +
    "\057\uffac\060\uffac\063\uffac\064\uffac\066\uffac\001\002\000" +
    "\034\002\uffe9\010\uffe9\016\uffe9\025\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\040\uffe9\041" +
    "\uffe9\001\002\000\012\006\126\063\100\064\103\066\101" +
    "\001\002\000\106\002\uffba\006\uffba\010\uffba\011\uffba\012" +
    "\uffba\014\uffba\015\uffba\016\uffba\017\uffba\025\uffba\027\uffba" +
    "\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\040" +
    "\uffba\041\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba" +
    "\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060" +
    "\uffba\063\uffba\064\uffba\066\uffba\001\002\000\056\002\uffcc" +
    "\006\uffcc\010\uffcc\011\uffcc\012\uffcc\014\uffcc\015\uffcc\016" +
    "\uffcc\017\uffcc\025\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\040\uffcc\041\uffcc\063\uffcc\064" +
    "\uffcc\066\uffcc\001\002\000\026\005\042\016\051\022\046" +
    "\023\053\024\050\042\052\043\040\044\037\045\054\046" +
    "\034\001\002\000\026\005\042\016\051\022\046\023\053" +
    "\024\050\042\052\043\040\044\037\045\054\046\034\001" +
    "\002\000\026\005\042\016\051\022\046\023\053\024\050" +
    "\042\052\043\040\044\037\045\054\046\034\001\002\000" +
    "\026\005\042\016\051\022\046\023\053\024\050\042\052" +
    "\043\040\044\037\045\054\046\034\001\002\000\026\005" +
    "\042\016\051\022\046\023\053\024\050\042\052\043\040" +
    "\044\037\045\054\046\034\001\002\000\026\005\042\016" +
    "\051\022\046\023\053\024\050\042\052\043\040\044\037" +
    "\045\054\046\034\001\002\000\072\002\uffc6\006\uffc6\010" +
    "\uffc6\011\uffc6\012\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6" +
    "\025\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\040\uffc6\041\uffc6\045\057\046\060\047\063" +
    "\050\062\051\061\052\056\063\uffc6\064\uffc6\066\uffc6\001" +
    "\002\000\072\002\uffc5\006\uffc5\010\uffc5\011\uffc5\012\uffc5" +
    "\014\uffc5\015\uffc5\016\uffc5\017\uffc5\025\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\040\uffc5" +
    "\041\uffc5\045\057\046\060\047\063\050\062\051\061\052" +
    "\056\063\uffc5\064\uffc5\066\uffc5\001\002\000\072\002\uffca" +
    "\006\uffca\010\uffca\011\uffca\012\uffca\014\uffca\015\uffca\016" +
    "\uffca\017\uffca\025\uffca\027\uffca\030\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\035\uffca\040\uffca\041\uffca\045\057\046" +
    "\060\047\063\050\062\051\061\052\056\063\uffca\064\uffca" +
    "\066\uffca\001\002\000\072\002\uffc7\006\uffc7\010\uffc7\011" +
    "\uffc7\012\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\025\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\040\uffc7\041\uffc7\045\057\046\060\047\063\050\062" +
    "\051\061\052\056\063\uffc7\064\uffc7\066\uffc7\001\002\000" +
    "\072\002\uffc9\006\uffc9\010\uffc9\011\uffc9\012\uffc9\014\uffc9" +
    "\015\uffc9\016\uffc9\017\uffc9\025\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\040\uffc9\041\uffc9" +
    "\045\057\046\060\047\063\050\062\051\061\052\056\063" +
    "\uffc9\064\uffc9\066\uffc9\001\002\000\072\002\uffc8\006\uffc8" +
    "\010\uffc8\011\uffc8\012\uffc8\014\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\025\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\040\uffc8\041\uffc8\045\057\046\060\047" +
    "\063\050\062\051\061\052\056\063\uffc8\064\uffc8\066\uffc8" +
    "\001\002\000\106\002\uffc3\006\uffc3\010\uffc3\011\uffc3\012" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\025\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\040" +
    "\uffc3\041\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\061" +
    "\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060" +
    "\uffc3\063\uffc3\064\uffc3\066\uffc3\001\002\000\024\016\027" +
    "\025\026\027\005\031\023\032\004\033\010\034\030\035" +
    "\007\040\032\001\002\000\004\033\147\001\002\000\004" +
    "\005\150\001\002\000\030\005\042\016\051\022\046\023" +
    "\053\024\050\042\052\043\040\044\037\045\054\046\034" +
    "\065\041\001\002\000\012\006\152\063\100\064\103\066" +
    "\101\001\002\000\036\002\uffd7\010\uffd7\012\153\016\uffd7" +
    "\025\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\035\uffd7\040\uffd7\041\uffd7\001\002\000\034\002\uffd8" +
    "\010\uffd8\016\uffd8\025\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\040\uffd8\041\uffd8\001\002" +
    "\000\026\010\156\016\027\025\026\027\005\031\023\032" +
    "\004\033\010\034\030\035\007\040\032\001\002\000\034" +
    "\002\uffff\010\uffff\016\uffff\025\uffff\027\uffff\030\uffff\031" +
    "\uffff\032\uffff\033\uffff\034\uffff\035\uffff\040\uffff\041\uffff" +
    "\001\002\000\036\002\ufffd\010\ufffd\016\ufffd\025\ufffd\026" +
    "\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd" +
    "\035\ufffd\040\ufffd\041\ufffd\001\002\000\032\005\160\016" +
    "\051\022\046\023\053\024\050\037\162\042\052\043\040" +
    "\044\037\045\054\046\034\065\041\001\002\000\032\005" +
    "\042\006\202\016\204\022\046\023\053\024\050\042\052" +
    "\043\040\044\037\045\054\046\034\065\041\001\002\000" +
    "\044\002\uffd4\010\uffd4\012\200\016\uffd4\025\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\040" +
    "\uffd4\041\uffd4\063\100\064\103\066\101\001\002\000\004" +
    "\005\163\001\002\000\006\006\165\016\166\001\002\000" +
    "\006\006\uffda\011\uffda\001\002\000\004\007\145\001\002" +
    "\000\014\004\175\006\uffaf\011\uffaf\013\072\020\076\001" +
    "\002\000\006\006\uffdb\011\uffdb\001\002\000\006\006\172" +
    "\011\171\001\002\000\004\016\166\001\002\000\004\007" +
    "\145\001\002\000\034\002\uffe6\010\uffe6\016\uffe6\025\uffe6" +
    "\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\040\uffe6\041\uffe6\001\002\000\006\006\uffdc\011\uffdc" +
    "\001\002\000\030\005\042\016\051\022\046\023\053\024" +
    "\050\042\052\043\040\044\037\045\054\046\034\065\041" +
    "\001\002\000\014\006\uffd9\011\uffd9\063\100\064\103\066" +
    "\101\001\002\000\034\002\uffe4\010\uffe4\016\uffe4\025\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\040\uffe4\041\uffe4\001\002\000\034\002\uffd5\010\uffd5" +
    "\016\uffd5\025\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\035\uffd5\040\uffd5\041\uffd5\001\002\000\006" +
    "\006\207\011\171\001\002\000\004\021\205\001\002\000" +
    "\044\006\uffda\011\uffda\045\uffb8\046\uffb8\047\uffb8\050\uffb8" +
    "\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057" +
    "\uffb8\060\uffb8\063\uffb8\064\uffb8\066\uffb8\001\002\000\054" +
    "\004\175\005\075\006\uffaf\011\uffaf\013\072\020\076\045" +
    "\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf" +
    "\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\063\uffaf\064" +
    "\uffaf\066\uffaf\001\002\000\004\007\145\001\002\000\034" +
    "\002\uffe3\010\uffe3\016\uffe3\025\uffe3\027\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\040\uffe3\041\uffe3" +
    "\001\002\000\004\021\210\001\002\000\004\007\145\001" +
    "\002\000\034\002\uffe5\010\uffe5\016\uffe5\025\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\040" +
    "\uffe5\041\uffe5\001\002\000\030\005\042\016\051\022\046" +
    "\023\053\024\050\042\052\043\040\044\037\045\054\046" +
    "\034\065\041\001\002\000\012\006\214\063\100\064\103" +
    "\066\101\001\002\000\004\007\145\001\002\000\036\002" +
    "\uffd3\010\uffd3\016\uffd3\025\uffd3\026\216\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\040\uffd3\041" +
    "\uffd3\001\002\000\006\007\145\025\026\001\002\000\034" +
    "\002\uffd2\010\uffd2\016\uffd2\025\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\040\uffd2\041\uffd2" +
    "\001\002\000\034\002\uffd0\010\uffd0\016\uffd0\025\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\040\uffd0\041\uffd0\001\002\000\034\002\uffd1\010\uffd1\016" +
    "\uffd1\025\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\040\uffd1\041\uffd1\001\002\000\034\002" +
    "\uffeb\010\uffeb\016\uffeb\025\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\032\uffeb\033\uffeb\034\uffeb\035\uffeb\040\uffeb\041\uffeb\001" +
    "\002\000\004\002\001\001\002\000\030\005\042\016\051" +
    "\022\046\023\053\024\050\042\052\043\040\044\037\045" +
    "\054\046\034\065\041\001\002\000\012\006\226\063\100" +
    "\064\103\066\101\001\002\000\004\007\145\001\002\000" +
    "\034\002\uffe7\010\uffe7\016\uffe7\025\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\040\uffe7\041" +
    "\uffe7\001\002\000\004\016\231\001\002\000\004\036\232" +
    "\001\002\000\030\005\042\016\051\022\046\023\053\024" +
    "\050\042\052\043\040\044\037\045\054\046\034\065\041" +
    "\001\002\000\012\006\234\063\100\064\103\066\101\001" +
    "\002\000\004\007\145\001\002\000\034\002\uffd6\010\uffd6" +
    "\016\uffd6\025\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033" +
    "\uffd6\034\uffd6\035\uffd6\040\uffd6\041\uffd6\001\002\000\030" +
    "\005\042\016\051\022\046\023\053\024\050\042\052\043" +
    "\040\044\037\045\054\046\034\065\041\001\002\000\012" +
    "\006\240\063\100\064\103\066\101\001\002\000\004\007" +
    "\241\001\002\000\004\030\242\001\002\000\014\023\053" +
    "\024\050\042\052\043\040\044\037\001\002\000\010\010" +
    "\245\030\246\041\244\001\002\000\004\015\252\001\002" +
    "\000\034\002\ufff1\010\ufff1\016\ufff1\025\ufff1\027\ufff1\030" +
    "\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\040\ufff1" +
    "\041\ufff1\001\002\000\014\023\053\024\050\042\052\043" +
    "\040\044\037\001\002\000\004\015\250\001\002\000\024" +
    "\016\027\025\026\027\005\031\023\032\004\033\010\034" +
    "\030\035\007\040\032\001\002\000\032\010\uffef\016\027" +
    "\025\026\027\005\030\uffef\031\023\032\004\033\010\034" +
    "\030\035\007\040\032\041\uffef\001\002\000\024\016\027" +
    "\025\026\027\005\031\023\032\004\033\010\034\030\035" +
    "\007\040\032\001\002\000\026\010\254\016\027\025\026" +
    "\027\005\031\023\032\004\033\010\034\030\035\007\040" +
    "\032\001\002\000\034\002\ufff0\010\ufff0\016\ufff0\025\ufff0" +
    "\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035" +
    "\ufff0\040\ufff0\041\ufff0\001\002\000\004\015\256\001\002" +
    "\000\024\016\027\025\026\027\005\031\023\032\004\033" +
    "\010\034\030\035\007\040\032\001\002\000\032\010\uffee" +
    "\016\027\025\026\027\005\030\uffee\031\023\032\004\033" +
    "\010\034\030\035\007\040\032\041\uffee\001\002\000\034" +
    "\002\uffed\010\uffed\016\uffed\025\uffed\027\uffed\030\uffed\031" +
    "\uffed\032\uffed\033\uffed\034\uffed\035\uffed\040\uffed\041\uffed" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\036\002\016\003\023\004\017\005\021\007" +
    "\015\011\012\013\010\014\013\015\030\016\024\017\005" +
    "\020\011\021\014\024\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\004\154\005\021" +
    "\007\015\011\012\013\010\014\013\015\030\016\024\017" +
    "\005\020\011\021\014\024\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\145\001" +
    "\001\000\002\001\001\000\020\024\044\027\043\030\035" +
    "\031\034\032\046\033\032\034\042\001\001\000\002\001" +
    "\001\000\012\024\044\031\143\033\032\034\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\024\044\027\126\030\035\031\034" +
    "\032\046\033\032\034\042\001\001\000\020\024\044\027" +
    "\124\030\035\031\034\032\046\033\032\034\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\035\073\036\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\024\044\031\054\033\032\034\042\001\001" +
    "\000\002\001\001\000\012\024\044\031\070\033\032\034" +
    "\042\001\001\000\012\024\044\031\067\033\032\034\042" +
    "\001\001\000\012\024\044\031\066\033\032\034\042\001" +
    "\001\000\012\024\044\031\065\033\032\034\042\001\001" +
    "\000\012\024\044\031\064\033\032\034\042\001\001\000" +
    "\012\024\044\031\063\033\032\034\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\024\044" +
    "\027\121\030\035\031\034\032\046\033\032\034\042\001" +
    "\001\000\004\035\120\001\001\000\002\001\001\000\024" +
    "\024\044\025\112\026\110\027\113\030\035\031\034\032" +
    "\046\033\032\034\042\001\001\000\020\024\044\027\076" +
    "\030\035\031\034\032\046\033\032\034\042\001\001\000" +
    "\002\001\001\000\020\024\044\027\107\030\035\031\034" +
    "\032\046\033\032\034\042\001\001\000\020\024\044\027" +
    "\104\030\035\031\034\032\046\033\032\034\042\001\001" +
    "\000\002\001\001\000\020\024\044\027\103\030\035\031" +
    "\034\032\046\033\032\034\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\024\044\027\106\030\035\031" +
    "\034\032\046\033\032\034\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\024\044\026\117\027\113\030\035\031\034\032\046\033" +
    "\032\034\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\044\031\142\033\032\034\042\001" +
    "\001\000\012\024\044\031\141\033\032\034\042\001\001" +
    "\000\012\024\044\031\140\033\032\034\042\001\001\000" +
    "\012\024\044\031\137\033\032\034\042\001\001\000\012" +
    "\024\044\031\136\033\032\034\042\001\001\000\012\024" +
    "\044\031\135\033\032\034\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\153\004\017\005\021\007\015\011\012\013\010\014" +
    "\013\015\030\016\024\017\005\020\011\021\014\024\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\024" +
    "\044\027\150\030\035\031\034\032\046\033\032\034\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\004\154\005\021\007\015\011\012\013\010" +
    "\014\013\015\030\016\024\017\005\020\011\021\014\024" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\024\044\027\160\030\035\031\034\032\046\033\032\034" +
    "\042\001\001\000\024\022\200\023\166\024\044\027\124" +
    "\030\035\031\034\032\046\033\032\034\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\167\023\166" +
    "\034\163\001\001\000\002\001\001\000\004\006\176\001" +
    "\001\000\006\035\073\036\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\173\034\163\001\001\000" +
    "\004\006\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\024\044\027\175\030\035\031\034\032\046\033" +
    "\032\034\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\073\036\072\001\001\000\004" +
    "\006\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\210\001\001\000\002\001\001\000\020\024\044" +
    "\027\212\030\035\031\034\032\046\033\032\034\042\001" +
    "\001\000\002\001\001\000\004\006\214\001\001\000\004" +
    "\010\216\001\001\000\006\006\217\007\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\024\044\027\224\030" +
    "\035\031\034\032\046\033\032\034\042\001\001\000\002" +
    "\001\001\000\004\006\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\024\044\027\232" +
    "\030\035\031\034\032\046\033\032\034\042\001\001\000" +
    "\002\001\001\000\004\006\234\001\001\000\002\001\001" +
    "\000\020\024\044\027\236\030\035\031\034\032\046\033" +
    "\032\034\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\242\001\001\000\004\033\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\246\001\001\000\002\001\001\000\034\003\250\004" +
    "\017\005\021\007\015\011\012\013\010\014\013\015\030" +
    "\016\024\017\005\020\011\021\014\024\020\001\001\000" +
    "\032\004\154\005\021\007\015\011\012\013\010\014\013" +
    "\015\030\016\024\017\005\020\011\021\014\024\020\001" +
    "\001\000\034\003\252\004\017\005\021\007\015\011\012" +
    "\013\010\014\013\015\030\016\024\017\005\020\011\021" +
    "\014\024\020\001\001\000\032\004\154\005\021\007\015" +
    "\011\012\013\010\014\013\015\030\016\024\017\005\020" +
    "\011\021\014\024\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\003\256\004\017\005\021\007\015\011" +
    "\012\013\010\014\013\015\030\016\024\017\005\020\011" +
    "\021\014\024\020\001\001\000\032\004\154\005\021\007" +
    "\015\011\012\013\010\014\013\015\030\016\024\017\005" +
    "\020\011\021\014\024\020\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Variable en la que se almacena el arbol de sintaxis abstracta que se 
     * genera luego del analisis sintáctico.
     */
    NodoAST AST = null;

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
            String error = "No se esperaba este componente: " +s.value+".\n";
            error += "Se esperaba : ";
            for(int i : expected_token_ids()){
                error += symbl_name_from_id(i) + " ";
            }
            System.err.println(error);
            VentanaErrores.getVenErrores().AgregarError("Sintactico",error, s.left , s.right);
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  
    /**
     * Método que devuelve el AST que se generó después de realizar el análisis sintáctico. 
     * @return árbol de sintaxis abstacta que será utilizado posteriormente en la ejecución.
     */
    public NodoAST getAST(){
        return AST;
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INI EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INI ::= L_INSTR 
            {
              Object RESULT =null;
		System.out.println("EL ANÁLISIS TERMINÓ BIEN :)");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INI",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // L_INSTR ::= L_INSTR INSTR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_INSTR",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // L_INSTR ::= INSTR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_INSTR",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOQUE ::= LLAVEIZQ L_INSTR LLAVEDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTR ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTR ::= IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTR ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTR ::= DOWHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTR ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTR ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTR ::= BREAK 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTR ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTR ::= RETURN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTR ::= DEC_FUN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTR ::= CALL_FUN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SWITCH ::= RSWITCH PARIZQ EXP PARDER LLAVEIZQ L_CASE LLAVEDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SWITCH ::= RSWITCH PARIZQ EXP PARDER LLAVEIZQ L_CASE RDEFAULT DOSPUNTOS L_INSTR LLAVEDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // L_CASE ::= L_CASE RCASE PRIMITIVO DOSPUNTOS L_INSTR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_CASE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // L_CASE ::= RCASE PRIMITIVO DOSPUNTOS L_INSTR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_CASE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTINUE ::= RCONTINUE PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTINUE",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTINUE ::= RCONTINUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTINUE",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BREAK ::= RBREAK PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BREAK",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BREAK ::= RBREAK 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BREAK",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RETURN ::= RRETURN EXP PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETURN",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RETURN ::= RRETURN EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETURN",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // WHILE ::= RWHILE PARIZQ EXP PARDER BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DEC_FUN ::= IDENTIFICADOR IGUAL RFUNCTION PARIZQ L_PARAM_FORM PARDER BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC_FUN",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DEC_FUN ::= IDENTIFICADOR IGUAL PARIZQ L_PARAM_FORM PARDER FLECHA BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC_FUN",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DEC_FUN ::= IDENTIFICADOR IGUAL RFUNCTION PARIZQ PARDER BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC_FUN",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DEC_FUN ::= IDENTIFICADOR IGUAL PARIZQ PARDER FLECHA BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC_FUN",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CALL_FUN ::= IDENTIFICADOR PARIZQ L_PARAM_ACT PARDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CALL_FUN",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CALL_FUN ::= IDENTIFICADOR PARIZQ PARDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CALL_FUN",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // L_PARAM_ACT ::= L_PARAM_ACT COMA PARAM_ACT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_PARAM_ACT",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // L_PARAM_ACT ::= PARAM_ACT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_PARAM_ACT",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAM_ACT ::= RDEFAULT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM_ACT",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAM_ACT ::= EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM_ACT",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // L_PARAM_FORM ::= L_PARAM_FORM COMA PARAM_FORM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_PARAM_FORM",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // L_PARAM_FORM ::= PARAM_FORM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_PARAM_FORM",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAM_FORM ::= ACCESO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM_FORM",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAM_FORM ::= IDENTIFICADOR IGUAL EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM_FORM",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DOWHILE ::= RDO BLOQUE RWHILE PARIZQ EXP PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DOWHILE",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DOWHILE ::= RDO BLOQUE RWHILE PARIZQ EXP PARDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DOWHILE",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FOR ::= RFOR PARIZQ IDENTIFICADOR RIN EXP PARDER BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIGNACION ::= IDENTIFICADOR IGUAL EXP PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNACION ::= IDENTIFICADOR IGUAL EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF ::= RIF PARIZQ EXP PARDER BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF ::= RIF PARIZQ EXP PARDER BLOQUE ELSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELSE ::= RELSE IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELSE ::= RELSE BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP ::= EXP OR EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP ::= EXP AND EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP ::= EXP_TERNARIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= NOT EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= EXP2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP2 ::= EXP3 MAYOR EXP3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP2 ::= EXP3 MENOR EXP3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP2 ::= EXP3 MENORIGUAL EXP3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP2 ::= EXP3 MAYORIGUAL EXP3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP2 ::= EXP3 IGUALQUE EXP3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP2 ::= EXP3 DIFERENTE EXP3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP2 ::= EXP3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP3 ::= MENOS EXP3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP3 ::= MAS EXP3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP3 ::= EXP3 MAS EXP3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP3 ::= EXP3 MENOS EXP3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP3 ::= EXP3 POR EXP3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP3 ::= EXP3 DIV EXP3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP3 ::= EXP3 POT EXP3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP3 ::= EXP3 MOD EXP3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP3 ::= CALL_FUN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP3 ::= PARIZQ EXP PARDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP3 ::= PRIMITIVO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP3 ::= ACCESO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP3 ::= RNULL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PRIMITIVO ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PRIMITIVO ::= CADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PRIMITIVO ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PRIMITIVO ::= RFALSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PRIMITIVO ::= RTRUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP_TERNARIA ::= EXP TERNARIO EXP DOSPUNTOS EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_TERNARIA",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ACCESO ::= IDENTIFICADOR L_INDEX 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ACCESO ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // L_INDEX ::= L_INDEX INDEX 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_INDEX",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // L_INDEX ::= INDEX 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_INDEX",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INDEX ::= CORIZQ EXP CORDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INDEX",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INDEX ::= DCORIZQ EXP DCORDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INDEX",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
