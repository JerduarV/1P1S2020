options {
  IGNORE_CASE = true;
  OUTPUT_DIRECTORY = "../GramaticaJavaCC";
  STATIC = false;
}

PARSER_BEGIN(Gramatica)
/** Analizador de Lenguaje Arit en JAVACC */

package GramaticaJavaCC; 

import Interprete.Arbol;
import Interprete.Expresiones.*;
import Interprete.Expresiones.Operaciones.*;
import Interprete.Instrucciones.*;
import java.util.LinkedList;
import Interprete.NodoAST;

public class Gramatica {

    /**
     * Función para procesar la cadena
    */
    private Expresion procesarCadena(String cad, int fila, int col){
        cad = cad.substring(1,cad.length()-1);
        cad = cad.replace("\\","\\");
        cad = cad.replace("\\n","\n");
        cad = cad.replace("\\t","\t");
        return new Primitivo(fila, col, cad);
    }

}
PARSER_END(Gramatica)

/** Lexico */
SKIP : {
      " "
    | "\t"
    | "\r"
    | "\n"
    | <"#" (~["\n", "\r"])*>
    | <"#*" (~["*"])* "*" ("*" | ~["*","#"] (~["*"])* "*")* "#">
}

TOKEN : {
      <NUMERO: (["0"-"9"])+>
    | <DECIMAL: (["0"-"9"])+"."(["0"-"9"])+>
    
    //PALABRAS RESERVADAS
    |   < RNULL:        "null"      >
    |   < RTRUE:        "true"      >
    |   < RFALSE:       "false"     >
    |   < RIF:          "if"        >
    |   < RELSE:        "else"      >
    |   < RSWITCH:      "switch"    >
    |   < RCASE:        "case"       >
    |   < RBREAK:       "break"     >
    |   < RCONTINUE:    "continue"  >
    |   < RWHILE:       "while"     >
    |   < RDO:          "do"        >
    |   < RFOR:         "for"       >
    |   < RIN:          "in"        >
    |   < RFUNCTION:    "function"  >
    |   < RRETURN:      "return"    >
    |   < RDEFAULT:     "default"   >

    //SIMBOLOS
    |   < IGUAL:        "="         >
    |   < PARIZQ:       "("         >
    |   < PARDER:       ")"         >
    |   < LLAVEIZQ:     "{"         >
    |   < LLAVEDER:     "}"         >
    |   < COMA:         ","         >
    |   < PTCOMA:       ";"         >
    |   < DOSPUNTOS:    ":"         >
    |   < CORIZQ:       "["         >
    |   < CORDER:       "]"         >
    |   < FLECHA:       "=>"        >

    //OPERADORES
    |   < MAS:          "+"         >
    |   < MENOS:        "-"         >
    |   < POR:          "*"         >
    |   < DIV:          "/"         >
    |   < POT:          "^"         >
    |   < MOD:          "%%"        >

    |   < MENOR:        "<"         >
    |   < MAYOR:        ">"         >
    |   < MENORIGUAL:   "<="        >
    |   < MAYORIGUAL:   ">="        >
    |   < IGUALQUE:     "=="        >
    |   < DIFERENTE:    "!="        >

    |   < AND:          "&"         >
    |   < OR:           "|"         >
    |   < NOT:          "!"         >

    |   < TERNARIO:     "?"         >

    |   <IDENTIFICADOR: ((["A"-"Z","a"-"z"])+([".","_","0"-"9","A"-"Z","a"-"z"])*)|((["."])+(["A"-"Z","a"-"z"]([".","_","0"-"9","A"-"Z","a"-"z"])*)?) >
}

MORE :
{
    "\""    :   STRING_STATE
}

<STRING_STATE> MORE:
{
    <~["\""]>
}

<STRING_STATE> TOKEN:
{
        < STRING:   "\"">   :   DEFAULT 
}

/** Fin Lexico */

/** Producción inicial 
    INI -> L_INSTR
*/
Arbol INI() :
{LinkedList<NodoAST> l;}
{
  l = L_INSTR() <EOF> { Arbol a = new Arbol(l); return a;}
}

/**
    L_INSTR ->  L_INSTR INSTR
            |   INSTR
*/
LinkedList<NodoAST> L_INSTR() :
{
    NodoAST i; 
    LinkedList<NodoAST> l = new LinkedList<NodoAST>();
}
{
        (i = INSTR(){l.add(i);})+ {return l;}
}

/**
    BLOQUE ->   '{' L_INSTR '}'
            |   '{' '}'
*/
LinkedList<NodoAST> BLOQUE() :
{
    LinkedList<NodoAST> l = new LinkedList<NodoAST>();
}
{
        <LLAVEIZQ> (l = L_INSTR())? <LLAVEDER>  {return l;}
}

/** 
    INSTR ->    DEC_FUN
            |   CALL_FUN
            |   ASIGNACION
            |   CALL_FUN
            |   RETURN
            |   IF
            |   WHILE
            |   FOR
            |   SWITCH
*/
NodoAST INSTR() :
{
    NodoAST i;
}
{
        LOOKAHEAD(3) i = DEC_FUN()              {return i;}
    |   LOOKAHEAD(2) i = CALL_FUN() (<PTCOMA>)? {return i;}
    |   i = ASIGNACION()                        {return i;}
    |   i = RETURN() (<PTCOMA>)?                {return i;}
    |   i = IF()                                {return i;}
    |   i = WHILE()                             {return i;}
    |   i = DOWHILE()                           {return i;}
    |   i = FOR()                               {return i;}
    |   i = SWITCH()                            {return i;}
}

NodoAST SWITCH() :
{
    Expresion e;
    LinkedList<Case> l = new LinkedList<Case>();
    LinkedList<NodoAST> d = new LinkedList<NodoAST>();
    NodoAST n;
}
{
        <RSWITCH> <PARIZQ> e = EXP() <PARDER> <LLAVEIZQ>
        (
            {n = new Switch(e,l,token.beginLine,token.beginColumn);}
            ( 
                l = L_CASE()    {n = new Switch(e,l,token.beginLine,token.beginColumn);} 
            )?
            (
                <RDEFAULT> <DOSPUNTOS>
                {n = new Switch(e,l,new DefaultSw(d,token.beginLine,token.beginColumn),token.beginLine,token.beginColumn);}
                (
                    d = L_INSTR()   {n  = new Switch(e,l,new DefaultSw(d,token.beginLine,token.beginColumn), token.beginLine,token.beginColumn);} 
                )?
            )
        )
        <LLAVEDER>
        {return n;}
}

LinkedList<Case> L_CASE() :
{
    Expresion e;
    LinkedList<Case> l = new LinkedList<Case>();
    LinkedList<NodoAST> li = new LinkedList<NodoAST>();
    Case c;
    Token t;
}
{
        (   
            t = <RCASE> e = EXP() <DOSPUNTOS> {c = new Case(e,new LinkedList<NodoAST>(),t.beginLine,t.beginColumn);} 
            ( 
                li = L_INSTR()  {c = new Case(e,li,t.beginLine,t.beginColumn);}
            )?
            {l.add(c);}
        )+
        {return l;}
}

/**
    FOR ->  'FOR' '(' ID 'IN' EXP ')' BLOQUE
*/
NodoAST FOR() :
{
    Token id;
    LinkedList<NodoAST> b;
    Expresion e;
}
{
        <RFOR> <PARIZQ> id = <IDENTIFICADOR> <RIN> e = EXP() <PARDER> b = BLOQUE()
        {return new For(id.image,e,b,token.beginLine,token.beginColumn);}
}

/**
    DOWHILE ->  'DO' BLOQUE '(' EXP ')' ( ';' )?
*/
NodoAST DOWHILE() :
{
    Expresion e;
    LinkedList<NodoAST> b;
}
{
        <RDO> b = BLOQUE() <RWHILE> <PARIZQ> e = EXP() <PARDER> (<PTCOMA>)? {return new DoWhile(b,e,token.beginLine,token.beginColumn);}
}

/**
    WHILE ->    'WHILE' '(' EXP ')' BLOQUE
*/
NodoAST WHILE() :
{
    Expresion e;
    LinkedList<NodoAST> l;
}
{
        <RWHILE> <PARIZQ> e = EXP() <PARDER> l = BLOQUE()   {return new While(e,l,token.beginLine,token.beginColumn);}
}

/**
    IF -> 'IF' '(' EXP ')' ( ELSE )?
*/
NodoAST IF() :
{
    Expresion e;
    Instruccion i;
    LinkedList<NodoAST> c;
    NodoAST n;
}
{
        <RIF> <PARIZQ> e = EXP() <PARDER> c = BLOQUE() {n = new Si(e,c,token.beginLine,token.beginColumn);} 
        ( 
            i = ELSE() {n = new Si(e,c,(Else)i,token.beginLine,token.beginColumn);}
        )?
        {return n;}
}

/**
    ELSE ->     'ELSE' BLOQUE
            |   'ELSE' IF
*/
Instruccion ELSE() :
{
    LinkedList<NodoAST> l;
    NodoAST si;
}
{
        <RELSE>
        (
            si = IF()       {return new Else((Si)si,token.beginLine,token.beginColumn);}
        |   l = BLOQUE()    {return new Else(l,token.beginLine,token.beginColumn);}
        )
}

/**
    RETURN ->   RRETURN '(' EXP ')'
            |   RRETURN
*/
Expresion RETURN() :
{
    Expresion e;
}
{
    (
        LOOKAHEAD(2) <RRETURN> <PARIZQ> e = EXP() <PARDER>  {return new Return(e, token.beginLine, token.beginColumn);}
    |   <RRETURN>                                           {return new Return(token.beginLine, token.beginColumn);}
    )
}

/**
    DEC_FUN -> IDENFICADOR IGUAL 'FUNCTION' '(' (L_PARAM_FORM)? ')' '{' BLOQUE '}'
*/
Instruccion DEC_FUN() :
{
    LinkedList<Declaracion> l = new LinkedList<Declaracion>();
    LinkedList<NodoAST> b = new LinkedList<NodoAST>();
    Token t;
}
{
        t = <IDENTIFICADOR> <IGUAL> <RFUNCTION> <PARIZQ> (l = L_PARAM_FORM())? <PARDER> b = BLOQUE()
        {return new DecFuncion(t.image, l, b, t.beginLine, t.beginColumn);}
}

LinkedList<Declaracion> L_PARAM_FORM() :
{
    Declaracion d;
    LinkedList<Declaracion> l = new LinkedList<Declaracion>();
}
{
        d = PARAM_FORM()    {l.add(d);}
        (
            <COMA> d = PARAM_FORM() {l.add(d);}
        )*
        {return l;}
}

Declaracion PARAM_FORM() :
{
    Token t;
    Expresion e;
}
{
        LOOKAHEAD(2) t = <IDENTIFICADOR> <IGUAL> e = EXP()      {return new Declaracion(t.image, e, t.beginLine, t.beginColumn);}
    |   t = <IDENTIFICADOR>                                     {return new Declaracion(t.image, t.beginLine, t.beginColumn);}
}

/**
    ASIGNACION ->   IDENTIFICADOR IGUAL EXP (PTCOMA)?
*/
Instruccion ASIGNACION() :
{
    Token id;
    Expresion e;
    LinkedList<Indice> l = new LinkedList<Indice>();
}
{   
        LOOKAHEAD(2) id = <IDENTIFICADOR> l = L_INDEX() <IGUAL> e = EXP() (<PTCOMA>)?
        {return new AccesoAsig(l,new Identificador(id.image,id.beginLine,id.beginColumn),e,id.beginLine,id.beginColumn);}

    |   id = <IDENTIFICADOR> <IGUAL> e = EXP() (<PTCOMA>)?  
        {return new Asignacion(token.beginLine,token.beginColumn,id.image,e);}
}

/**
    EXP ->  EXP_L '?' EXP_L ':' EXP_L
        |   EXP_L
*/
Expresion EXP() :
{
    Expresion e,e1,e2;
}
{
        e = EXP_L()
        (
            <TERNARIO> e1 = EXP_L() <DOSPUNTOS> e2 = EXP_L()    {e = new ExpTernaria(e,e1,e2,token.beginLine,token.beginColumn);}
        )*
        {return e;}
        
}

/** 
    EXP_L ->    EXP_AND ( <OR> EXP_AND )*
*/
Expresion EXP_L() :
{   
    Expresion e, e1;
}
{
    e = EXP_AND()
    (
        <OR> e1 = EXP_AND() { e = new ExpLogica(token.beginLine, token.beginColumn, e, e1, TipoOpe.OR);}
    )*
    {return e;}
}

/**
    EXP_AND -> EXP_IGUAL ( <AND> EXP_IGUAL )*
*/
Expresion EXP_AND() :
{
    Expresion e, e1;
}
{
    e = EXP_IGUAL()
    (
        <AND> e1 = EXP_IGUAL() {e = new ExpLogica(token.beginLine, token.beginColumn, e, e1, TipoOpe.AND);}
    )*
    {return e;}
}

/**
    EXP_IGUAL ->    EXP_REL ( == EXP_REL )*
               |    EXP_REL ( != EXP_REL )*
*/
Expresion EXP_IGUAL() :
{
    Expresion e, e1;
}
{
    e = EXP_REL()
    (
            <IGUALQUE> e1 = EXP_REL()   {e = new ExpRelacional(token.beginLine, token.beginColumn, e, e1, TipoOpe.IGUALQUE);}
        |   <DIFERENTE> e1 = EXP_REL()  {e = new ExpRelacional(token.beginLine, token.beginColumn, e, e1, TipoOpe.DIFERENTE);}
    )*
    {return e;}
}

/**
    EXP_REL ->  EXP_ADD ( > EXP_ADD )*
            |   EXP_ADD ( < EXP_ADD )*
            |   EXP_ADD ( <= EXP_ADD )*
            |   EXP_ADD ( >= EXP_ADD )*
*/
Expresion EXP_REL() :
{
    Expresion e, e1;
}
{
    e = EXP_ADD()
    (
            <MAYOR> e1 = EXP_ADD()          {e = new ExpRelacional(token.beginLine, token.beginColumn, e, e1, TipoOpe.MAYOR);}
        |   <MENOR> e1 = EXP_ADD()          {e = new ExpRelacional(token.beginLine, token.beginColumn, e, e1, TipoOpe.MENOR);}
        |   <MENORIGUAL> e1 = EXP_ADD()     {e = new ExpRelacional(token.beginLine, token.beginColumn, e, e1, TipoOpe.MENORIGUAL);}
        |   <MAYORIGUAL> e1 = EXP_ADD()     {e = new ExpRelacional(token.beginLine, token.beginColumn, e, e1, TipoOpe.MAYORIGUAL);}
    )*
    {return e;}
}

/**
    EXP_ADD ->  EXP_MULT ( + EXP_MULT )*
            |   EXP_MULT ( - EXP_MULT )*
*/
Expresion EXP_ADD() :
{
    Expresion e, e1;
}
{
    e = EXP_MULT()
    (
            <MAS> e1 = EXP_MULT()   {e = new ExpAritmetica(token.beginLine, token.beginColumn, e, e1, TipoOpe.SUMA);}
        |   <MENOS> e1 = EXP_MULT() {e = new ExpAritmetica(token.beginLine, token.beginColumn, e, e1, TipoOpe.RESTA);}
    )*
    {return e;}
}

/** 
    EXP_MULT ->     EXP_POT ( * EXP_POT )*
            |       EXP_POT ( / EXP_POT )*
*/
Expresion EXP_MULT() :
{
    Expresion e, e1;
}
{
    e = EXP_POT()
    (
            <POR> e1 = EXP_POT()    {e = new ExpAritmetica(token.beginLine, token.beginColumn, e, e1, TipoOpe.MULT);}
       |    <DIV> e1 = EXP_POT()    {e = new ExpAritmetica(token.beginLine, token.beginColumn, e, e1, TipoOpe.DIV);}
       |    <MOD> e1 = EXP_POT()    {e = new ExpAritmetica(token.beginLine, token.beginColumn, e, e1, TipoOpe.MOD);}
    )*
    {return e;}
}

/**
    EXP_POT ->  EXP_U ( ^ EXP_U )*
*/
Expresion EXP_POT() :
{
    Expresion e, e1;
}
{
    e = EXP_A()
    ( 
        <POT> e1 = EXP_A()  {e = new ExpAritmetica(token.beginLine, token.beginColumn, e, e1, TipoOpe.POT);}
    )*
    {return e;}
}

Expresion EXP_A() :
{
    Expresion e;
    LinkedList<Indice> l;
}
{
        e = EXP_U() (l = L_INDEX() {e = new AccesoGet(e,l);})?
        {return e;}
}

/**
    L_INDEX ->  L_INDEX INDEX
            |   INDEX
*/
LinkedList<Indice> L_INDEX() :
{
    LinkedList<Indice> l = new LinkedList<Indice>();
    Expresion e, e1;
    Indice i;
}
{
    (
            LOOKAHEAD(2) <CORIZQ> <CORIZQ> e = EXP() <CORDER> <CORDER>  {l.add(new Indice(e, Indice.TipoIndice.DOBLE));}
        |   LOOKAHEAD(2) <CORIZQ> <COMA> e = EXP() <CORDER>             {l.add(new Indice(e,Indice.TipoIndice.MATRIX_COL));}
        |   <CORIZQ> e = EXP() {i = new Indice(e);}
            ( 
                <COMA> {i = new Indice(e, Indice.TipoIndice.MATRIX_ROW);}
                (
                    e1 = EXP() {i = new Indice(e,e1);}
                )?
            )? 
            <CORDER> {l.add(i);}
    )+
    {return l;}
}

/** 
    EXP_U ->    - EXP_U
            |   ! EXP_U
            |   PRIMITIVO
*/
Expresion EXP_U() :
{
    Expresion e;
}
{
        <MENOS> e = EXP_U() {return new ExpAritmetica(e, token.beginLine, token.beginColumn);}
    |   <NOT> e = EXP_U()   {return new ExpLogica(e, token.beginLine, token.beginColumn);}
    |   e = PRIMITIVO()     {return e;}
}

/** Primitivo -> Numero
              |  Decimal
              |  '(' Expresion ')' 
*/
Expresion PRIMITIVO() :
{
    Expresion e;
    String s;
    Token t;
}
{
        <NUMERO>                            {return new Primitivo(token.beginLine, token.beginColumn, Integer.parseInt(token.image));}
    |   <DECIMAL>                           {return new Primitivo(token.beginLine, token.beginColumn, Double.parseDouble(token.image));}
    |   <RTRUE>                             {return new Primitivo(token.beginLine, token.beginColumn, true);}
    |   <RFALSE>                            {return new Primitivo(token.beginLine, token.beginColumn, false);}
    |   LOOKAHEAD(2) e = CALL_FUN()         {return e;}
    |   t = <STRING>                        {return this.procesarCadena(t.image, token.beginLine, token.beginColumn);}
    |   <PARIZQ> e = EXP() <PARDER>         {return e;}
    |   LOOKAHEAD(2) t = <IDENTIFICADOR>    {return new Identificador(t.image, token.beginLine,token.beginColumn);}
}

/**
    CALL_FUN -> IDENTIFICADOR PARIZQ LISTA_EXP PARDER
            |   IDENTIFICADOR PARIZQ PARDER
*/
Expresion CALL_FUN() :
{
    LinkedList<Expresion> l;
    Token t;
}
{
        t = <IDENTIFICADOR> <PARIZQ> l = L_PARAM_ACT() <PARDER> {return CallFun.ReturnCallFun(t.image,l,token.beginLine,token.beginColumn);}
}

/**
    L_PARAM_ACT ->  L_PARAM_ACT PARAM_ACT
                |   PARAM_ACT
*/
LinkedList<Expresion> L_PARAM_ACT() :
{
    LinkedList<Expresion> l = new LinkedList<Expresion>();
    Expresion e;
}
{
    (
        e = PARAM_ACT() {l.add(e);}
        (
            <COMA> e = PARAM_ACT() {l.add(e);}
        )*
    )?
    {return l;}
}

/**
    PARAM_ACT ->    EXP
                |   'DEFAULT'
*/
Expresion PARAM_ACT() :
{
    Expresion e;
}
{
        e = EXP()   {return e;}
    |   <RDEFAULT>  {return new ValorDefault(token.beginLine, token.beginColumn);}    
}

