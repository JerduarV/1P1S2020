/*
 * Desarrollado por Jerson Villatoro
 */
package GramaticaFlexCup; 

import Editor.VentanaErrores;
import Interprete.Arbol;
import Interprete.Expresiones.*;
import Interprete.Expresiones.Operaciones.*;
import Interprete.Expresiones.Nativas.*;
import Interprete.Instrucciones.*;
import java.util.LinkedList;
import Interprete.NodoAST;
import java_cup.runtime.*;

parser code 
{:
    /**
     * Variable en la que se almacena el arbol de sintaxis abstracta que se 
     * genera luego del analisis sintáctico.
     */
    Arbol AST = null;

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
            String error = "No se esperaba este componente: " +s.value+".\n";
            error += "Se esperaba : ";
            for(int i : expected_token_ids()){
                error += symbl_name_from_id(i) + " ";
            }
            System.err.println(error);
            VentanaErrores.getVenErrores().AgregarError("Sintactico",error, s.left , s.right);
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  
    /**
     * Método que devuelve el AST que se generó después de realizar el análisis sintáctico. 
     * @return árbol de sintaxis abstacta que será utilizado posteriormente en la ejecución.
     */
    public Arbol getAST(){
        return AST;
    }

    private Expresion ReturnCallFun(String id, LinkedList<Expresion> l, int fila, int col){
        switch(id.toLowerCase()){
            case "c":
                return new FuncionC(l,fila,col);
            case "list":
                return new CallList(l,fila,col);
            case "typeof":
                return new Typeof(l,fila,col);
            case "length":
                return new Length(l,fila,col);
            default:
                return new CallFun(id,l,fila,col);
        }
    }
    
:} 

//SIGNOS DE PUNTUACION
terminal String IGUAL,PARIZQ,PARDER,LLAVEIZQ,LLAVEDER,COMA,PTCOMA,CORIZQ,CORDER,DOSPUNTOS;
terminal String IDENTIFICADOR,DCORDER,DCORIZQ,FLECHA;

//PALABRAS RESERVADAS
terminal String RNULL,RTRUE,RFALSE,RIF,RELSE,RSWITCH,RCASE,RBREAK,RCONTINUE,RWHILE;
terminal String RDO,RFOR,RIN,RFUNCTION,RRETURN,RDEFAULT;
//FIN PALABRAS RESERVADAS

//PRIMITIVOS
terminal String ENTERO, DECIMAL, CADENA;

//OPERADORES
terminal String MAS,MENOS,POR,DIV,POT,MOD;
terminal String MENOR,MAYOR,MENORIGUAL,MAYORIGUAL,IGUALQUE,DIFERENTE,UMENOS;
terminal String AND,OR,NOT,TERNARIO;

//NO TERMINALES

//INSTRUCCIONES
non terminal INI;
non terminal NodoAST INSTR;
non terminal LinkedList<NodoAST> L_INSTR, BLOQUE;
non terminal Instruccion ASIGNACION,IF,ELSE,SWITCH,L_CASE,WHILE,DOWHILE,FOR,BREAK,CONTINUE;
non terminal Instruccion PARAM_FORM,DEC_FUN;
non terminal LinkedList<Declaracion> L_PARAM_FORM;

//EXPRESIONES
non terminal Expresion EXP,EXP2,EXP3,EXP_TERNARIA,PRIMITIVO,ACCESO,CALL_FUN,PARAM_ACT,RETURN;
non terminal Indice INDEX;
non terminal LinkedList<Indice> L_INDEX;
non terminal LinkedList<Expresion> L_PARAM_ACT;


//Operaciones logicas
precedence right TERNARIO;
precedence left  OR;
precedence left  AND;
precedence nonassoc NOT;

//Operaciones Relacionales
precedence left DIFERENTE,IGUALQUE;
precedence left  MENOR,MAYOR,MENORIGUAL,MAYORIGUAL;

//Operaciones numericas
precedence left  MAS,MENOS;
precedence left  POR,DIV,MOD;
precedence right UMENOS;
precedence nonassoc POT;
precedence right CORIZQ,CORDER,DCORIZQ,DCORDER;

start with INI; 

INI ::= 
        L_INSTR:l   {:AST = new Arbol(l);:}
;

L_INSTR ::=
        L_INSTR:l INSTR:i   {:RESULT = l; RESULT.add(i);:}
    |   INSTR:i             {:RESULT = new LinkedList<NodoAST>(); RESULT.add(i);:}
;

BLOQUE ::=
        LLAVEIZQ L_INSTR:l LLAVEDER     {:RESULT = l;:}
    |   LLAVEIZQ LLAVEDER               {:RESULT = new LinkedList<>();:}
;

INSTR ::=
        ASIGNACION:i        {:RESULT = i;:}
    |   IF:i                {:RESULT = i;:}
    |   WHILE:w             {:RESULT = w;:}
    |   DOWHILE:d           {:RESULT = d;:}
    |   SWITCH
    |   FOR
    |   BREAK:i             {:RESULT = i;:}
    |   CONTINUE:c          {:RESULT = c;:}
    |   RETURN:r            {:RESULT = r;:}
    |   DEC_FUN:d           {:RESULT = d;:}
    |   CALL_FUN:c          {:RESULT = c;:}
    |   CALL_FUN:c PTCOMA   {:RESULT = c;:}
;

SWITCH ::=
        RSWITCH PARIZQ EXP PARDER LLAVEIZQ L_CASE LLAVEDER
    |   RSWITCH PARIZQ EXP PARDER LLAVEIZQ L_CASE RDEFAULT DOSPUNTOS L_INSTR LLAVEDER
;

L_CASE ::=
        L_CASE RCASE PRIMITIVO DOSPUNTOS L_INSTR
    |   RCASE PRIMITIVO DOSPUNTOS L_INSTR
;

CONTINUE ::=
        RCONTINUE:c PTCOMA  {:RESULT = new Continue(cleft,cright);:}
    |   RCONTINUE:c         {:RESULT = new Continue(cleft,cright);:}
;

BREAK ::=
        RBREAK:b PTCOMA     {:RESULT = new Break(bleft,bright);:}
    |   RBREAK:b            {:RESULT = new Break(bleft,bright);:}
;

RETURN ::=
        RRETURN PARIZQ EXP:e PARDER         {:RESULT = new Return(e,eleft,eright);:}
    |   RRETURN:r                           {:RESULT = new Return(rleft,rright);:}
    |   RRETURN PARIZQ EXP:e PARDER PTCOMA  {:RESULT = new Return(e,eleft,eright);:}
    |   RRETURN:r PTCOMA                    {:RESULT = new Return(rleft,rright);:}
;

WHILE ::=
    RWHILE PARIZQ EXP:e PARDER BLOQUE:b         {:RESULT = new While(e,b,eleft,eright);:}
;

DEC_FUN ::=
        IDENTIFICADOR:id IGUAL RFUNCTION PARIZQ L_PARAM_FORM:l PARDER BLOQUE:b      {:RESULT = new DecFuncion(id,l,b,idleft,idright);:}
    |   IDENTIFICADOR:id IGUAL PARIZQ L_PARAM_FORM:l PARDER FLECHA BLOQUE:b         {:RESULT = new DecFuncion(id,l,b,idleft,idright);:}
    |   IDENTIFICADOR:id IGUAL RFUNCTION PARIZQ PARDER BLOQUE:b                     {:RESULT = new DecFuncion(id,new LinkedList<Declaracion>(),b,idleft,idright);:}
    |   IDENTIFICADOR:id IGUAL PARIZQ PARDER FLECHA BLOQUE:b                        {:RESULT = new DecFuncion(id,new LinkedList<Declaracion>(),b,idleft,idright);:}
;

CALL_FUN ::=
        IDENTIFICADOR:id PARIZQ L_PARAM_ACT:e PARDER    {:RESULT = ReturnCallFun(id,e,idleft,idright);:}
    |   IDENTIFICADOR:id PARIZQ PARDER                  {:RESULT = ReturnCallFun(id,new LinkedList<Expresion>(),idleft,idright);:}
;

L_PARAM_ACT ::=
        L_PARAM_ACT:l COMA PARAM_ACT:p  {:RESULT = l; RESULT.add(p);:}
    |   PARAM_ACT:e                     {:RESULT = new LinkedList<>(); RESULT.add(e);:}
;

PARAM_ACT ::=
        RDEFAULT:r  {:RESULT = new ValorDefault(rleft,rright);:}
    |   EXP:e       {:RESULT = e;:}
;

L_PARAM_FORM ::=
        L_PARAM_FORM:l COMA PARAM_FORM:p    {:RESULT = l; RESULT.add((Declaracion)p);:}
    |   PARAM_FORM:p                        {:RESULT = new LinkedList<>(); RESULT.add((Declaracion)p);:}
;

PARAM_FORM ::=
        IDENTIFICADOR:id                {:RESULT = new Declaracion(id,idleft,idright);:}
    |   IDENTIFICADOR:id IGUAL EXP:e    {:RESULT = new Declaracion(id,e,idleft,idright);:}
;

DOWHILE ::=
        RDO BLOQUE:b RWHILE PARIZQ EXP:e PARDER PTCOMA          {:RESULT = new DoWhile(b,e,bleft,bright);:}
    |   RDO BLOQUE:b RWHILE PARIZQ EXP:e PARDER                 {:RESULT = new DoWhile(b,e,bleft,bright);:}
;

FOR ::=
        RFOR PARIZQ IDENTIFICADOR RIN EXP PARDER BLOQUE
;

ASIGNACION ::=
        IDENTIFICADOR:i IGUAL EXP:e PTCOMA      {:RESULT = new Asignacion(ileft,iright,i,e);:}
    |   IDENTIFICADOR:i IGUAL EXP:e             {:RESULT = new Asignacion(ileft,iright,i,e);:}             
    |   ACCESO:a IGUAL EXP:e                    {:RESULT = new AccesoAsig((AccesoGet)a,e);:}
    |   ACCESO:a IGUAL EXP:e PTCOMA             {:RESULT = new AccesoAsig((AccesoGet)a,e);:}
;

IF ::=
        RIF PARIZQ EXP:e PARDER BLOQUE:b            {:RESULT = new Si(e,b,eleft,eright);:}
    |   RIF PARIZQ EXP:e PARDER BLOQUE:b ELSE:el    {:RESULT = new Si(e,b,(Else)el,eleft,eright);:}
;

ELSE ::=
        RELSE:r IF:i                {:RESULT = new Else((Si)i,rleft,rright);:}
    |   RELSE:r BLOQUE:b            {:RESULT = new Else(b,rleft,rright);:}
;



EXP ::=
        EXP:e1 OR EXP:e2            {:RESULT = new ExpLogica(e1left,e1right,e1,e2,TipoOpe.OR);:}
    |   EXP:e1 AND EXP:e2           {:RESULT = new ExpLogica(e1left,e1right,e1,e2,TipoOpe.AND);:}
    |   EXP_TERNARIA              
    |   NOT EXP:e                   {:RESULT = new ExpLogica(e,eleft,eright);:}
    |   EXP2:e                      {:RESULT = e;:}
;

EXP2 ::=
        EXP3:e1 MAYOR EXP3:e2       {:RESULT = new ExpRelacional(e1left,e1right,e1,e2,TipoOpe.MAYOR);:}
    |   EXP3:e1 MENOR EXP3:e2       {:RESULT = new ExpRelacional(e1left,e1right,e1,e2,TipoOpe.MENOR);:}
    |   EXP3:e1 MENORIGUAL EXP3:e2  {:RESULT = new ExpRelacional(e1left,e1right,e1,e2,TipoOpe.MENORIGUAL);:}
    |   EXP3:e1 MAYORIGUAL EXP3:e2  {:RESULT = new ExpRelacional(e1left,e1right,e1,e2,TipoOpe.MAYORIGUAL);:}
    |   EXP3:e1 IGUALQUE EXP3:e2    {:RESULT = new ExpRelacional(e1left,e1right,e1,e2,TipoOpe.IGUALQUE);:}
    |   EXP3:e1 DIFERENTE EXP3:e2   {:RESULT = new ExpRelacional(e1left,e1right,e1,e2,TipoOpe.DIFERENTE);:}
    |   EXP3:e                      {:RESULT = e;:}
;

EXP3 ::=
        MENOS EXP3:e1               {:RESULT = new ExpAritmetica(e1,e1left,e1right);:} %prec UMENOS
    |   EXP3:e1 MAS EXP3:e2         {:RESULT = new ExpAritmetica(e1left,e1right,e1,e2,TipoOpe.SUMA);:}
    |   EXP3:e1 MENOS EXP3:e2       {:RESULT = new ExpAritmetica(e1left,e1right,e1,e2,TipoOpe.RESTA);:}
    |   EXP3:e1 POR EXP3:e2         {:RESULT = new ExpAritmetica(e1left,e1right,e1,e2,TipoOpe.MULT);:}
    |   EXP3:e1 DIV EXP3:e2         {:RESULT = new ExpAritmetica(e1left,e1right,e1,e2,TipoOpe.DIV);:}
    |   EXP3:e1 POT EXP3:e2         {:RESULT = new ExpAritmetica(e1left,e1right,e1,e2,TipoOpe.POT);:}
    |   EXP3:e1 MOD EXP3:e2         {:RESULT = new ExpAritmetica(e1left,e1right,e1,e2,TipoOpe.MOD);:}
    |   CALL_FUN:c                  {:RESULT = c;:}
    |   PARIZQ EXP:e PARDER         {:RESULT = e;:}
    |   PRIMITIVO:e                 {:RESULT = e;:}
    |   EXP3:e INDEX:l              {:LinkedList<Indice> lista = new LinkedList<>();lista.add(l);RESULT = new AccesoGet(e,lista);:}
    |   IDENTIFICADOR:id            {:RESULT = new Identificador(id,idleft,idright);:}  
    |   RNULL
;

PRIMITIVO ::=
        ENTERO:e    {:RESULT = new Primitivo(eleft,eright,Integer.parseInt(e));:}
    |   CADENA:e    {:RESULT = new Primitivo(eleft,eright,e);:}
    |   DECIMAL:e   {:RESULT = new Primitivo(eleft,eright,Double.parseDouble(e));:}
    |   RFALSE:e    {:RESULT = new Primitivo(eleft,eright,false);:}
    |   RTRUE:e     {:RESULT = new Primitivo(eleft,eright,true);:}
;

EXP_TERNARIA ::=
        EXP TERNARIO EXP DOSPUNTOS EXP
;

ACCESO ::=
        IDENTIFICADOR:id L_INDEX:l      {:RESULT = new AccesoGet(new Identificador(id,idleft,idright),l);:}
;

L_INDEX ::=
        L_INDEX:l INDEX:i   {:l.add(i); RESULT = l;:}
    |   INDEX:i             {:RESULT = new LinkedList<>(); RESULT.add(i);:}
;

INDEX ::=
        CORIZQ EXP:e CORDER         {:RESULT = new Indice(e);:}
    |   DCORIZQ EXP:e DCORDER       {:RESULT = new Indice(e,false);:}
;