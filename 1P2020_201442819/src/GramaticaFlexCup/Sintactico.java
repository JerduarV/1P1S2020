
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package GramaticaFlexCup;

import Editor.VentanaErrores;
import Interprete.Arbol;
import Interprete.Expresiones.*;
import Interprete.Expresiones.Operaciones.*;
import Interprete.Expresiones.Nativas.*;
import Interprete.Instrucciones.*;
import java.util.LinkedList;
import Interprete.NodoAST;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\003\000\002\005\005\000\002\005\004" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\004\000\002\011\011" +
    "\000\002\011\014\000\002\012\007\000\002\012\006\000" +
    "\002\017\004\000\002\017\003\000\002\016\004\000\002" +
    "\016\003\000\002\020\006\000\002\020\003\000\002\020" +
    "\007\000\002\020\004\000\002\013\007\000\002\022\011" +
    "\000\002\022\011\000\002\022\010\000\002\022\010\000" +
    "\002\032\006\000\002\032\005\000\002\036\005\000\002" +
    "\036\003\000\002\033\003\000\002\033\003\000\002\023" +
    "\005\000\002\023\003\000\002\021\003\000\002\021\005" +
    "\000\002\014\011\000\002\014\010\000\002\015\011\000" +
    "\002\006\006\000\002\006\005\000\002\006\005\000\002" +
    "\006\006\000\002\007\007\000\002\007\010\000\002\010" +
    "\004\000\002\010\004\000\002\024\005\000\002\024\005" +
    "\000\002\024\003\000\002\024\004\000\002\024\003\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\003\000\002\026\004\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\003\000\002\026\005\000\002" +
    "\026\003\000\002\026\004\000\002\026\003\000\002\026" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\027\007\000" +
    "\002\031\004\000\002\035\004\000\002\035\003\000\002" +
    "\034\005\000\002\034\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\024\016\030\025\027\027\005\031\024\032" +
    "\004\033\010\034\031\035\007\040\033\001\002\000\036" +
    "\002\uffea\010\uffea\012\265\016\uffea\025\uffea\027\uffea\030" +
    "\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\040\uffea" +
    "\041\uffea\001\002\000\004\005\243\001\002\000\034\002" +
    "\ufff4\010\ufff4\016\ufff4\025\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\033\ufff4\034\ufff4\035\ufff4\040\ufff4\041\ufff4\001" +
    "\002\000\004\005\235\001\002\000\004\005\231\001\002" +
    "\000\034\002\ufff9\010\ufff9\016\ufff9\025\ufff9\027\ufff9\030" +
    "\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\040\ufff9" +
    "\041\ufff9\001\002\000\034\002\ufff3\010\ufff3\016\ufff3\025" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\040\ufff3\041\ufff3\001\002\000\034\002\ufff8\010" +
    "\ufff8\016\ufff8\025\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8" +
    "\033\ufff8\034\ufff8\035\ufff8\040\ufff8\041\ufff8\001\002\000" +
    "\034\002\ufff7\010\ufff7\016\ufff7\025\ufff7\027\ufff7\030\ufff7" +
    "\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\040\ufff7\041" +
    "\ufff7\001\002\000\034\002\ufff2\010\ufff2\016\ufff2\025\ufff2" +
    "\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035" +
    "\ufff2\040\ufff2\041\ufff2\001\002\000\034\002\ufffa\010\ufffa" +
    "\016\ufffa\025\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033" +
    "\ufffa\034\ufffa\035\ufffa\040\ufffa\041\ufffa\001\002\000\004" +
    "\004\226\001\002\000\004\002\225\001\002\000\034\002" +
    "\ufffe\010\ufffe\016\ufffe\025\ufffe\027\ufffe\030\ufffe\031\ufffe" +
    "\032\ufffe\033\ufffe\034\ufffe\035\ufffe\040\ufffe\041\ufffe\001" +
    "\002\000\036\002\ufff1\010\ufff1\012\224\016\ufff1\025\ufff1" +
    "\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035" +
    "\ufff1\040\ufff1\041\ufff1\001\002\000\034\002\ufffb\010\ufffb" +
    "\016\ufffb\025\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033" +
    "\ufffb\034\ufffb\035\ufffb\040\ufffb\041\ufffb\001\002\000\036" +
    "\002\uffe8\010\uffe8\012\223\016\uffe8\025\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\040\uffe8" +
    "\041\uffe8\001\002\000\026\002\000\016\030\025\027\027" +
    "\005\031\024\032\004\033\010\034\031\035\007\040\033" +
    "\001\002\000\034\002\ufff5\010\ufff5\016\ufff5\025\ufff5\027" +
    "\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5" +
    "\040\ufff5\041\ufff5\001\002\000\004\005\213\001\002\000" +
    "\012\004\162\005\056\013\106\020\111\001\002\000\004" +
    "\007\146\001\002\000\034\002\ufff6\010\ufff6\016\ufff6\025" +
    "\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6" +
    "\035\ufff6\040\ufff6\041\ufff6\001\002\000\040\002\uffe6\005" +
    "\034\010\uffe6\012\035\016\uffe6\025\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\040\uffe6\041" +
    "\uffe6\001\002\000\026\005\051\016\055\022\044\023\043" +
    "\024\052\042\045\043\037\044\036\046\042\064\053\001" +
    "\002\000\034\002\uffe4\010\uffe4\016\uffe4\025\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\040" +
    "\uffe4\041\uffe4\001\002\000\112\002\uffaf\006\uffaf\010\uffaf" +
    "\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017" +
    "\uffaf\020\uffaf\025\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf" +
    "\033\uffaf\034\uffaf\035\uffaf\040\uffaf\041\uffaf\045\uffaf\046" +
    "\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf" +
    "\055\uffaf\056\uffaf\057\uffaf\060\uffaf\062\uffaf\063\uffaf\065" +
    "\uffaf\001\002\000\112\002\uffae\006\uffae\010\uffae\011\uffae" +
    "\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020" +
    "\uffae\025\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae" +
    "\034\uffae\035\uffae\040\uffae\041\uffae\045\uffae\046\uffae\047" +
    "\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae" +
    "\056\uffae\057\uffae\060\uffae\062\uffae\063\uffae\065\uffae\001" +
    "\002\000\112\002\uffbe\006\uffbe\010\uffbe\011\uffbe\012\uffbe" +
    "\013\106\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\111\025" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\040\uffbe\041\uffbe\045\114\046\105\047\113\050" +
    "\116\051\107\052\112\053\133\054\135\055\132\056\134" +
    "\057\137\060\136\062\uffbe\063\uffbe\065\uffbe\001\002\000" +
    "\056\002\uffc5\006\uffc5\010\uffc5\011\uffc5\012\uffc5\014\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\025\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\040\uffc5\041\uffc5" +
    "\062\uffc5\063\uffc5\065\uffc5\001\002\000\024\005\051\016" +
    "\055\022\044\023\043\024\052\042\045\043\037\044\036" +
    "\046\042\001\002\000\112\002\uffac\006\uffac\010\uffac\011" +
    "\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac" +
    "\020\uffac\025\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033" +
    "\uffac\034\uffac\035\uffac\040\uffac\041\uffac\045\uffac\046\uffac" +
    "\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055" +
    "\uffac\056\uffac\057\uffac\060\uffac\062\uffac\063\uffac\065\uffac" +
    "\001\002\000\112\002\uffb1\006\uffb1\010\uffb1\011\uffb1\012" +
    "\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1" +
    "\025\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034" +
    "\uffb1\035\uffb1\040\uffb1\041\uffb1\045\uffb1\046\uffb1\047\uffb1" +
    "\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056" +
    "\uffb1\057\uffb1\060\uffb1\062\uffb1\063\uffb1\065\uffb1\001\002" +
    "\000\112\002\uffb0\006\uffb0\010\uffb0\011\uffb0\012\uffb0\013" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\025\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\040\uffb0\041\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0" +
    "\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057" +
    "\uffb0\060\uffb0\062\uffb0\063\uffb0\065\uffb0\001\002\000\112" +
    "\002\uffb4\006\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014" +
    "\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\025\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\040" +
    "\uffb4\041\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4" +
    "\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060" +
    "\uffb4\062\uffb4\063\uffb4\065\uffb4\001\002\000\112\002\uffb6" +
    "\006\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\025\uffb6\027\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\040\uffb6\041" +
    "\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6" +
    "\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\062" +
    "\uffb6\063\uffb6\065\uffb6\001\002\000\056\002\uffc7\006\uffc7" +
    "\010\uffc7\011\uffc7\012\uffc7\014\uffc7\015\uffc7\016\uffc7\017" +
    "\uffc7\025\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\040\uffc7\041\uffc7\062\uffc7\063\uffc7\065" +
    "\uffc7\001\002\000\026\005\051\016\055\022\044\023\043" +
    "\024\052\042\045\043\037\044\036\046\042\064\053\001" +
    "\002\000\112\002\uffad\006\uffad\010\uffad\011\uffad\012\uffad" +
    "\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\025" +
    "\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad" +
    "\035\uffad\040\uffad\041\uffad\045\uffad\046\uffad\047\uffad\050" +
    "\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad" +
    "\057\uffad\060\uffad\062\uffad\063\uffad\065\uffad\001\002\000" +
    "\026\005\051\016\055\022\044\023\043\024\052\042\045" +
    "\043\037\044\036\046\042\064\053\001\002\000\012\006" +
    "\077\062\064\063\066\065\065\001\002\000\114\002\uffb2" +
    "\005\056\006\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014" +
    "\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\025\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\040" +
    "\uffb2\041\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2" +
    "\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060" +
    "\uffb2\062\uffb2\063\uffb2\065\uffb2\001\002\000\032\005\051" +
    "\006\060\016\055\022\044\023\043\024\052\041\063\042" +
    "\045\043\037\044\036\046\042\064\053\001\002\000\006" +
    "\006\uffdb\011\uffdb\001\002\000\112\002\uffdd\006\uffdd\010" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\025\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\040\uffdd\041\uffdd\045\uffdd" +
    "\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054" +
    "\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\062\uffdd\063\uffdd" +
    "\065\uffdd\001\002\000\006\006\075\011\074\001\002\000" +
    "\014\006\uffd9\011\uffd9\062\064\063\066\065\065\001\002" +
    "\000\006\006\uffda\011\uffda\001\002\000\026\005\051\016" +
    "\055\022\044\023\043\024\052\042\045\043\037\044\036" +
    "\046\042\064\053\001\002\000\026\005\051\016\055\022" +
    "\044\023\043\024\052\042\045\043\037\044\036\046\042" +
    "\064\053\001\002\000\026\005\051\016\055\022\044\023" +
    "\043\024\052\042\045\043\037\044\036\046\042\064\053" +
    "\001\002\000\056\002\uffc9\006\uffc9\010\uffc9\011\uffc9\012" +
    "\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\025\uffc9\027\uffc9" +
    "\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\040" +
    "\uffc9\041\uffc9\062\064\063\uffc9\065\uffc9\001\002\000\012" +
    "\015\071\062\064\063\066\065\065\001\002\000\026\005" +
    "\051\016\055\022\044\023\043\024\052\042\045\043\037" +
    "\044\036\046\042\064\053\001\002\000\056\002\uffab\006" +
    "\uffab\010\uffab\011\uffab\012\uffab\014\uffab\015\uffab\016\uffab" +
    "\017\uffab\025\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033" +
    "\uffab\034\uffab\035\uffab\040\uffab\041\uffab\062\064\063\066" +
    "\065\065\001\002\000\056\002\uffc8\006\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\025\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\040\uffc8\041\uffc8\062\uffc8\063\uffc8\065\uffc8\001\002" +
    "\000\030\005\051\016\055\022\044\023\043\024\052\041" +
    "\063\042\045\043\037\044\036\046\042\064\053\001\002" +
    "\000\112\002\uffde\006\uffde\010\uffde\011\uffde\012\uffde\013" +
    "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\025\uffde" +
    "\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035" +
    "\uffde\040\uffde\041\uffde\045\uffde\046\uffde\047\uffde\050\uffde" +
    "\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057" +
    "\uffde\060\uffde\062\uffde\063\uffde\065\uffde\001\002\000\006" +
    "\006\uffdc\011\uffdc\001\002\000\036\002\uffe7\010\uffe7\012" +
    "\100\016\uffe7\025\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\040\uffe7\041\uffe7\001\002\000" +
    "\034\002\uffe5\010\uffe5\016\uffe5\025\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\040\uffe5\041" +
    "\uffe5\001\002\000\056\002\uffc6\006\uffc6\010\uffc6\011\uffc6" +
    "\012\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\025\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\040\uffc6\041\uffc6\062\uffc6\063\uffc6\065\uffc6\001\002\000" +
    "\012\006\103\062\064\063\066\065\065\001\002\000\112" +
    "\002\uffb5\006\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\025\uffb5\027\uffb5" +
    "\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\040" +
    "\uffb5\041\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5" +
    "\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060" +
    "\uffb5\062\uffb5\063\uffb5\065\uffb5\001\002\000\112\002\uffbd" +
    "\006\uffbd\010\uffbd\011\uffbd\012\uffbd\013\106\014\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\020\111\025\uffbd\027\uffbd\030\uffbd" +
    "\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\040\uffbd\041" +
    "\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\107\052\uffbd" +
    "\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\062" +
    "\uffbd\063\uffbd\065\uffbd\001\002\000\024\005\051\016\055" +
    "\022\044\023\043\024\052\042\045\043\037\044\036\046" +
    "\042\001\002\000\026\005\051\016\055\022\044\023\043" +
    "\024\052\042\045\043\037\044\036\046\042\064\053\001" +
    "\002\000\024\005\051\016\055\022\044\023\043\024\052" +
    "\042\045\043\037\044\036\046\042\001\002\000\114\002" +
    "\uffa8\004\uffa8\006\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8" +
    "\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\025\uffa8\027" +
    "\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8" +
    "\040\uffa8\041\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051" +
    "\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8" +
    "\060\uffa8\062\uffa8\063\uffa8\065\uffa8\001\002\000\026\005" +
    "\051\016\055\022\044\023\043\024\052\042\045\043\037" +
    "\044\036\046\042\064\053\001\002\000\024\005\051\016" +
    "\055\022\044\023\043\024\052\042\045\043\037\044\036" +
    "\046\042\001\002\000\024\005\051\016\055\022\044\023" +
    "\043\024\052\042\045\043\037\044\036\046\042\001\002" +
    "\000\024\005\051\016\055\022\044\023\043\024\052\042" +
    "\045\043\037\044\036\046\042\001\002\000\112\002\uffb3" +
    "\006\uffb3\010\uffb3\011\uffb3\012\uffb3\013\106\014\uffb3\015" +
    "\uffb3\016\uffb3\017\uffb3\020\111\025\uffb3\027\uffb3\030\uffb3" +
    "\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\040\uffb3\041" +
    "\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3" +
    "\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\062" +
    "\uffb3\063\uffb3\065\uffb3\001\002\000\024\005\051\016\055" +
    "\022\044\023\043\024\052\042\045\043\037\044\036\046" +
    "\042\001\002\000\112\002\uffb9\006\uffb9\010\uffb9\011\uffb9" +
    "\012\uffb9\013\106\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020" +
    "\111\025\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\034\uffb9\035\uffb9\040\uffb9\041\uffb9\045\uffb9\046\uffb9\047" +
    "\uffb9\050\uffb9\051\107\052\uffb9\053\uffb9\054\uffb9\055\uffb9" +
    "\056\uffb9\057\uffb9\060\uffb9\062\uffb9\063\uffb9\065\uffb9\001" +
    "\002\000\114\002\uffa9\004\uffa9\006\uffa9\010\uffa9\011\uffa9" +
    "\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020" +
    "\uffa9\025\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9" +
    "\034\uffa9\035\uffa9\040\uffa9\041\uffa9\045\uffa9\046\uffa9\047" +
    "\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9" +
    "\056\uffa9\057\uffa9\060\uffa9\062\uffa9\063\uffa9\065\uffa9\001" +
    "\002\000\112\002\uffbc\006\uffbc\010\uffbc\011\uffbc\012\uffbc" +
    "\013\106\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\111\025" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc" +
    "\035\uffbc\040\uffbc\041\uffbc\045\uffbc\046\uffbc\047\113\050" +
    "\116\051\107\052\112\053\uffbc\054\uffbc\055\uffbc\056\uffbc" +
    "\057\uffbc\060\uffbc\062\uffbc\063\uffbc\065\uffbc\001\002\000" +
    "\112\002\uffba\006\uffba\010\uffba\011\uffba\012\uffba\013\106" +
    "\014\uffba\015\uffba\016\uffba\017\uffba\020\111\025\uffba\027" +
    "\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba" +
    "\040\uffba\041\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051" +
    "\107\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba" +
    "\060\uffba\062\uffba\063\uffba\065\uffba\001\002\000\112\002" +
    "\uffb7\006\uffb7\010\uffb7\011\uffb7\012\uffb7\013\106\014\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\020\111\025\uffb7\027\uffb7\030" +
    "\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\040\uffb7" +
    "\041\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\107\052" +
    "\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7" +
    "\062\uffb7\063\uffb7\065\uffb7\001\002\000\012\017\125\062" +
    "\064\063\066\065\065\001\002\000\114\002\uffa6\004\uffa6" +
    "\006\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015" +
    "\uffa6\016\uffa6\017\uffa6\020\uffa6\025\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\040\uffa6\041" +
    "\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6" +
    "\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\062" +
    "\uffa6\063\uffa6\065\uffa6\001\002\000\110\002\uffb8\006\uffb8" +
    "\010\uffb8\011\uffb8\012\uffb8\013\106\014\uffb8\015\uffb8\016" +
    "\uffb8\017\uffb8\020\111\025\uffb8\027\uffb8\030\uffb8\031\uffb8" +
    "\032\uffb8\033\uffb8\034\uffb8\035\uffb8\040\uffb8\041\uffb8\045" +
    "\uffb8\046\uffb8\047\uffb8\050\uffb8\052\uffb8\053\uffb8\054\uffb8" +
    "\055\uffb8\056\uffb8\057\uffb8\060\uffb8\062\uffb8\063\uffb8\065" +
    "\uffb8\001\002\000\012\014\130\062\064\063\066\065\065" +
    "\001\002\000\114\002\uffa7\004\uffa7\006\uffa7\010\uffa7\011" +
    "\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7" +
    "\020\uffa7\025\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033" +
    "\uffa7\034\uffa7\035\uffa7\040\uffa7\041\uffa7\045\uffa7\046\uffa7" +
    "\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055" +
    "\uffa7\056\uffa7\057\uffa7\060\uffa7\062\uffa7\063\uffa7\065\uffa7" +
    "\001\002\000\112\002\uffbb\006\uffbb\010\uffbb\011\uffbb\012" +
    "\uffbb\013\106\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\111" +
    "\025\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\040\uffbb\041\uffbb\045\uffbb\046\uffbb\047\113" +
    "\050\116\051\107\052\112\053\uffbb\054\uffbb\055\uffbb\056" +
    "\uffbb\057\uffbb\060\uffbb\062\uffbb\063\uffbb\065\uffbb\001\002" +
    "\000\024\005\051\016\055\022\044\023\043\024\052\042" +
    "\045\043\037\044\036\046\042\001\002\000\024\005\051" +
    "\016\055\022\044\023\043\024\052\042\045\043\037\044" +
    "\036\046\042\001\002\000\024\005\051\016\055\022\044" +
    "\023\043\024\052\042\045\043\037\044\036\046\042\001" +
    "\002\000\024\005\051\016\055\022\044\023\043\024\052" +
    "\042\045\043\037\044\036\046\042\001\002\000\024\005" +
    "\051\016\055\022\044\023\043\024\052\042\045\043\037" +
    "\044\036\046\042\001\002\000\024\005\051\016\055\022" +
    "\044\023\043\024\052\042\045\043\037\044\036\046\042" +
    "\001\002\000\076\002\uffc0\006\uffc0\010\uffc0\011\uffc0\012" +
    "\uffc0\013\106\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\111" +
    "\025\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\040\uffc0\041\uffc0\045\114\046\105\047\113" +
    "\050\116\051\107\052\112\062\uffc0\063\uffc0\065\uffc0\001" +
    "\002\000\076\002\uffbf\006\uffbf\010\uffbf\011\uffbf\012\uffbf" +
    "\013\106\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\111\025" +
    "\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\040\uffbf\041\uffbf\045\114\046\105\047\113\050" +
    "\116\051\107\052\112\062\uffbf\063\uffbf\065\uffbf\001\002" +
    "\000\076\002\uffc4\006\uffc4\010\uffc4\011\uffc4\012\uffc4\013" +
    "\106\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\111\025\uffc4" +
    "\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\040\uffc4\041\uffc4\045\114\046\105\047\113\050\116" +
    "\051\107\052\112\062\uffc4\063\uffc4\065\uffc4\001\002\000" +
    "\076\002\uffc1\006\uffc1\010\uffc1\011\uffc1\012\uffc1\013\106" +
    "\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\111\025\uffc1\027" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1" +
    "\040\uffc1\041\uffc1\045\114\046\105\047\113\050\116\051" +
    "\107\052\112\062\uffc1\063\uffc1\065\uffc1\001\002\000\076" +
    "\002\uffc3\006\uffc3\010\uffc3\011\uffc3\012\uffc3\013\106\014" +
    "\uffc3\015\uffc3\016\uffc3\017\uffc3\020\111\025\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\040" +
    "\uffc3\041\uffc3\045\114\046\105\047\113\050\116\051\107" +
    "\052\112\062\uffc3\063\uffc3\065\uffc3\001\002\000\076\002" +
    "\uffc2\006\uffc2\010\uffc2\011\uffc2\012\uffc2\013\106\014\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\020\111\025\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\040\uffc2" +
    "\041\uffc2\045\114\046\105\047\113\050\116\051\107\052" +
    "\112\062\uffc2\063\uffc2\065\uffc2\001\002\000\026\010\155" +
    "\016\030\025\027\027\005\031\024\032\004\033\010\034" +
    "\031\035\007\040\033\001\002\000\004\033\150\001\002" +
    "\000\004\005\151\001\002\000\026\005\051\016\055\022" +
    "\044\023\043\024\052\042\045\043\037\044\036\046\042" +
    "\064\053\001\002\000\012\006\153\062\064\063\066\065" +
    "\065\001\002\000\036\002\uffd3\010\uffd3\012\154\016\uffd3" +
    "\025\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\040\uffd3\041\uffd3\001\002\000\034\002\uffd4" +
    "\010\uffd4\016\uffd4\025\uffd4\027\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\035\uffd4\040\uffd4\041\uffd4\001\002" +
    "\000\036\002\ufffc\010\ufffc\016\ufffc\025\ufffc\026\ufffc\027" +
    "\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc" +
    "\040\ufffc\041\ufffc\001\002\000\026\010\160\016\030\025" +
    "\027\027\005\031\024\032\004\033\010\034\031\035\007" +
    "\040\033\001\002\000\034\002\uffff\010\uffff\016\uffff\025" +
    "\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff\034\uffff" +
    "\035\uffff\040\uffff\041\uffff\001\002\000\036\002\ufffd\010" +
    "\ufffd\016\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd" +
    "\032\ufffd\033\ufffd\034\ufffd\035\ufffd\040\ufffd\041\ufffd\001" +
    "\002\000\010\004\uffaa\013\106\020\111\001\002\000\030" +
    "\005\164\016\055\022\044\023\043\024\052\037\163\042" +
    "\045\043\037\044\036\046\042\064\053\001\002\000\004" +
    "\005\205\001\002\000\030\005\051\006\171\016\172\022" +
    "\044\023\043\024\052\042\045\043\037\044\036\046\042" +
    "\064\053\001\002\000\044\002\uffd0\010\uffd0\012\166\016" +
    "\uffd0\025\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\040\uffd0\041\uffd0\062\064\063\066\065" +
    "\065\001\002\000\034\002\uffd1\010\uffd1\016\uffd1\025\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\040\uffd1\041\uffd1\001\002\000\006\006\uffd7\011\uffd7" +
    "\001\002\000\006\006\200\011\177\001\002\000\004\021" +
    "\175\001\002\000\054\004\173\005\056\006\uffd6\011\uffd6" +
    "\013\uffb2\020\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051" +
    "\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2" +
    "\060\uffb2\062\uffb2\063\uffb2\065\uffb2\001\002\000\026\005" +
    "\051\016\055\022\044\023\043\024\052\042\045\043\037" +
    "\044\036\046\042\064\053\001\002\000\014\006\uffd5\011" +
    "\uffd5\062\064\063\066\065\065\001\002\000\004\007\146" +
    "\001\002\000\034\002\uffdf\010\uffdf\016\uffdf\025\uffdf\027" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\040\uffdf\041\uffdf\001\002\000\004\016\203\001\002\000" +
    "\004\021\201\001\002\000\004\007\146\001\002\000\034" +
    "\002\uffe1\010\uffe1\016\uffe1\025\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\040\uffe1\041\uffe1" +
    "\001\002\000\010\004\173\006\uffd6\011\uffd6\001\002\000" +
    "\006\006\uffd8\011\uffd8\001\002\000\006\006\206\016\203" +
    "\001\002\000\004\007\146\001\002\000\006\006\210\011" +
    "\177\001\002\000\004\007\146\001\002\000\034\002\uffe2" +
    "\010\uffe2\016\uffe2\025\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\040\uffe2\041\uffe2\001\002" +
    "\000\034\002\uffe0\010\uffe0\016\uffe0\025\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\040\uffe0" +
    "\041\uffe0\001\002\000\026\005\051\016\055\022\044\023" +
    "\043\024\052\042\045\043\037\044\036\046\042\064\053" +
    "\001\002\000\012\006\215\062\064\063\066\065\065\001" +
    "\002\000\004\007\146\001\002\000\036\002\uffcd\010\uffcd" +
    "\016\uffcd\025\uffcd\026\217\027\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\040\uffcd\041\uffcd\001\002" +
    "\000\006\007\146\025\027\001\002\000\034\002\uffcc\010" +
    "\uffcc\016\uffcc\025\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\040\uffcc\041\uffcc\001\002\000" +
    "\034\002\uffca\010\uffca\016\uffca\025\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\040\uffca\041" +
    "\uffca\001\002\000\034\002\uffcb\010\uffcb\016\uffcb\025\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\040\uffcb\041\uffcb\001\002\000\034\002\uffe9\010\uffe9" +
    "\016\uffe9\025\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\040\uffe9\041\uffe9\001\002\000\034" +
    "\002\ufff0\010\ufff0\016\ufff0\025\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\040\ufff0\041\ufff0" +
    "\001\002\000\004\002\001\001\002\000\026\005\051\016" +
    "\055\022\044\023\043\024\052\042\045\043\037\044\036" +
    "\046\042\064\053\001\002\000\044\002\uffcf\010\uffcf\012" +
    "\230\016\uffcf\025\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\040\uffcf\041\uffcf\062\064\063" +
    "\066\065\065\001\002\000\034\002\uffce\010\uffce\016\uffce" +
    "\025\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\040\uffce\041\uffce\001\002\000\026\005\051" +
    "\016\055\022\044\023\043\024\052\042\045\043\037\044" +
    "\036\046\042\064\053\001\002\000\012\006\233\062\064" +
    "\063\066\065\065\001\002\000\004\007\146\001\002\000" +
    "\034\002\uffe3\010\uffe3\016\uffe3\025\uffe3\027\uffe3\030\uffe3" +
    "\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\040\uffe3\041" +
    "\uffe3\001\002\000\004\016\236\001\002\000\004\036\237" +
    "\001\002\000\026\005\051\016\055\022\044\023\043\024" +
    "\052\042\045\043\037\044\036\046\042\064\053\001\002" +
    "\000\012\006\241\062\064\063\066\065\065\001\002\000" +
    "\004\007\146\001\002\000\034\002\uffd2\010\uffd2\016\uffd2" +
    "\025\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\040\uffd2\041\uffd2\001\002\000\026\005\051" +
    "\016\055\022\044\023\043\024\052\042\045\043\037\044" +
    "\036\046\042\064\053\001\002\000\012\006\245\062\064" +
    "\063\066\065\065\001\002\000\004\007\246\001\002\000" +
    "\004\030\247\001\002\000\014\023\043\024\052\042\045" +
    "\043\037\044\036\001\002\000\010\010\252\030\253\041" +
    "\251\001\002\000\004\015\257\001\002\000\034\002\uffef" +
    "\010\uffef\016\uffef\025\uffef\027\uffef\030\uffef\031\uffef\032" +
    "\uffef\033\uffef\034\uffef\035\uffef\040\uffef\041\uffef\001\002" +
    "\000\014\023\043\024\052\042\045\043\037\044\036\001" +
    "\002\000\004\015\255\001\002\000\024\016\030\025\027" +
    "\027\005\031\024\032\004\033\010\034\031\035\007\040" +
    "\033\001\002\000\032\010\uffed\016\030\025\027\027\005" +
    "\030\uffed\031\024\032\004\033\010\034\031\035\007\040" +
    "\033\041\uffed\001\002\000\024\016\030\025\027\027\005" +
    "\031\024\032\004\033\010\034\031\035\007\040\033\001" +
    "\002\000\026\010\261\016\030\025\027\027\005\031\024" +
    "\032\004\033\010\034\031\035\007\040\033\001\002\000" +
    "\034\002\uffee\010\uffee\016\uffee\025\uffee\027\uffee\030\uffee" +
    "\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\040\uffee\041" +
    "\uffee\001\002\000\004\015\263\001\002\000\024\016\030" +
    "\025\027\027\005\031\024\032\004\033\010\034\031\035" +
    "\007\040\033\001\002\000\032\010\uffec\016\030\025\027" +
    "\027\005\030\uffec\031\024\032\004\033\010\034\031\035" +
    "\007\040\033\041\uffec\001\002\000\034\002\uffeb\010\uffeb" +
    "\016\uffeb\025\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033" +
    "\uffeb\034\uffeb\035\uffeb\040\uffeb\041\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\040\002\017\003\020\004\024\006\022\007" +
    "\015\011\013\013\010\014\012\015\031\016\025\017\005" +
    "\020\011\022\014\031\016\032\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\156\006\022\007\015\011\013\013\010\014" +
    "\012\015\031\016\025\017\005\020\011\022\014\031\016" +
    "\032\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\107\035\160\001\001\000\004\005\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\024\053\025" +
    "\040\026\037\027\047\030\045\032\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\034" +
    "\107\035\114\001\001\000\002\001\001\000\010\026\103" +
    "\030\045\032\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\024\101\025\040\026\037\027" +
    "\047\030\045\032\046\001\001\000\002\001\001\000\016" +
    "\024\100\025\040\026\037\027\047\030\045\032\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\024\061" +
    "\025\040\026\037\027\047\030\045\032\046\033\056\036" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\024" +
    "\072\025\040\026\037\027\047\030\045\032\046\001\001" +
    "\000\016\024\067\025\040\026\037\027\047\030\045\032" +
    "\046\001\001\000\016\024\066\025\040\026\037\027\047" +
    "\030\045\032\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\024\071\025\040\026\037\027\047\030\045" +
    "\032\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\024\061\025\040\026\037\027\047\030\045\032\046" +
    "\033\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\107\035\114\001" +
    "\001\000\010\026\130\030\045\032\046\001\001\000\016" +
    "\024\126\025\040\026\037\027\047\030\045\032\046\001" +
    "\001\000\010\026\125\030\045\032\046\001\001\000\002" +
    "\001\001\000\016\024\123\025\040\026\037\027\047\030" +
    "\045\032\046\001\001\000\010\026\122\030\045\032\046" +
    "\001\001\000\010\026\121\030\045\032\046\001\001\000" +
    "\010\026\120\030\045\032\046\001\001\000\004\034\117" +
    "\001\001\000\010\026\116\030\045\032\046\001\001\000" +
    "\006\034\107\035\114\001\001\000\002\001\001\000\006" +
    "\034\107\035\114\001\001\000\006\034\107\035\114\001" +
    "\001\000\006\034\107\035\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\034\107\035\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\034\107\035\114" +
    "\001\001\000\010\026\144\030\045\032\046\001\001\000" +
    "\010\026\143\030\045\032\046\001\001\000\010\026\142" +
    "\030\045\032\046\001\001\000\010\026\141\030\045\032" +
    "\046\001\001\000\010\026\140\030\045\032\046\001\001" +
    "\000\010\026\137\030\045\032\046\001\001\000\006\034" +
    "\107\035\114\001\001\000\006\034\107\035\114\001\001" +
    "\000\006\034\107\035\114\001\001\000\006\034\107\035" +
    "\114\001\001\000\006\034\107\035\114\001\001\000\006" +
    "\034\107\035\114\001\001\000\036\003\020\004\155\006" +
    "\022\007\015\011\013\013\010\014\012\015\031\016\025" +
    "\017\005\020\011\022\014\031\016\032\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\024\151\025\040" +
    "\026\037\027\047\030\045\032\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\156\006\022\007\015\011\013\013\010\014" +
    "\012\015\031\016\025\017\005\020\011\022\014\031\016" +
    "\032\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\117\001\001\000\016\024\164\025\040\026\037" +
    "\027\047\030\045\032\046\001\001\000\002\001\001\000" +
    "\022\021\166\023\167\024\101\025\040\026\037\027\047" +
    "\030\045\032\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\024\173\025\040\026\037\027" +
    "\047\030\045\032\046\001\001\000\002\001\001\000\004" +
    "\005\175\001\001\000\002\001\001\000\004\021\203\001" +
    "\001\000\002\001\001\000\004\005\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\166\023\206\001\001\000\004\005\211\001\001\000\002" +
    "\001\001\000\004\005\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\024\213\025\040\026\037\027\047" +
    "\030\045\032\046\001\001\000\002\001\001\000\004\005" +
    "\215\001\001\000\004\010\217\001\001\000\006\005\220" +
    "\007\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\024\226\025\040\026\037\027\047\030" +
    "\045\032\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\024\231\025\040\026\037\027\047\030\045\032" +
    "\046\001\001\000\002\001\001\000\004\005\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\024\237\025\040\026\037\027\047\030\045\032\046" +
    "\001\001\000\002\001\001\000\004\005\241\001\001\000" +
    "\002\001\001\000\016\024\243\025\040\026\037\027\047" +
    "\030\045\032\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\247\001\001\000\004\030\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\253\001\001\000\002\001\001\000\036\003\020" +
    "\004\255\006\022\007\015\011\013\013\010\014\012\015" +
    "\031\016\025\017\005\020\011\022\014\031\016\032\021" +
    "\001\001\000\034\003\156\006\022\007\015\011\013\013" +
    "\010\014\012\015\031\016\025\017\005\020\011\022\014" +
    "\031\016\032\021\001\001\000\036\003\020\004\257\006" +
    "\022\007\015\011\013\013\010\014\012\015\031\016\025" +
    "\017\005\020\011\022\014\031\016\032\021\001\001\000" +
    "\034\003\156\006\022\007\015\011\013\013\010\014\012" +
    "\015\031\016\025\017\005\020\011\022\014\031\016\032" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\020\004\263\006\022\007\015\011\013\013\010\014" +
    "\012\015\031\016\025\017\005\020\011\022\014\031\016" +
    "\032\021\001\001\000\034\003\156\006\022\007\015\011" +
    "\013\013\010\014\012\015\031\016\025\017\005\020\011" +
    "\022\014\031\016\032\021\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Variable en la que se almacena el arbol de sintaxis abstracta que se 
     * genera luego del analisis sintáctico.
     */
    Arbol AST = null;

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
            String error = "No se esperaba este componente: " +s.value+".\n";
            error += "Se esperaba : ";
            for(int i : expected_token_ids()){
                error += symbl_name_from_id(i) + " ";
            }
            System.err.println(error);
            VentanaErrores.getVenErrores().AgregarError("Sintactico",error, s.left , s.right);
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  
    /**
     * Método que devuelve el AST que se generó después de realizar el análisis sintáctico. 
     * @return árbol de sintaxis abstacta que será utilizado posteriormente en la ejecución.
     */
    public Arbol getAST(){
        return AST;
    }

    private Expresion ReturnCallFun(String id, LinkedList<Expresion> l, int fila, int col){
        switch(id.toLowerCase()){
            case "c":
                return new FuncionC(l,fila,col);
            default:
                return new CallFun(id,l,fila,col);
        }
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INI EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INI ::= L_INSTR 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> l = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		AST = new Arbol(l);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INI",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // L_INSTR ::= L_INSTR INSTR 
            {
              LinkedList<NodoAST> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> l = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST i = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = l; RESULT.add(i);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_INSTR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // L_INSTR ::= INSTR 
            {
              LinkedList<NodoAST> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST i = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<NodoAST>(); RESULT.add(i);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_INSTR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOQUE ::= LLAVEIZQ L_INSTR LLAVEDER 
            {
              LinkedList<NodoAST> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> l = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = l;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOQUE ::= LLAVEIZQ LLAVEDER 
            {
              LinkedList<NodoAST> RESULT =null;
		RESULT = new LinkedList<>();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTR ::= ASIGNACION 
            {
              NodoAST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = i;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTR",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTR ::= IF 
            {
              NodoAST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = i;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTR",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTR ::= WHILE 
            {
              NodoAST RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion w = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = w;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTR",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTR ::= DOWHILE 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTR",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTR ::= SWITCH 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTR",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTR ::= FOR 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTR",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTR ::= BREAK 
            {
              NodoAST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = i;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTR",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTR ::= CONTINUE 
            {
              NodoAST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = c;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTR",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTR ::= RETURN 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTR",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTR ::= DEC_FUN 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = d;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTR",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTR ::= CALL_FUN 
            {
              NodoAST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = c;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTR",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTR ::= CALL_FUN PTCOMA 
            {
              NodoAST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = c;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTR",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SWITCH ::= RSWITCH PARIZQ EXP PARDER LLAVEIZQ L_CASE LLAVEDER 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SWITCH ::= RSWITCH PARIZQ EXP PARDER LLAVEIZQ L_CASE RDEFAULT DOSPUNTOS L_INSTR LLAVEDER 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // L_CASE ::= L_CASE RCASE PRIMITIVO DOSPUNTOS L_INSTR 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_CASE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // L_CASE ::= RCASE PRIMITIVO DOSPUNTOS L_INSTR 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_CASE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTINUE ::= RCONTINUE PTCOMA 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Continue(cleft,cright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTINUE",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTINUE ::= RCONTINUE 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Continue(cleft,cright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTINUE",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BREAK ::= RBREAK PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Break(bleft,bright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BREAK",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BREAK ::= RBREAK 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Break(bleft,bright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BREAK",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RETURN ::= RRETURN PARIZQ EXP PARDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETURN",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RETURN ::= RRETURN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETURN",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RETURN ::= RRETURN PARIZQ EXP PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETURN",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RETURN ::= RRETURN PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETURN",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // WHILE ::= RWHILE PARIZQ EXP PARDER BLOQUE 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new While(e,b,eleft,eright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DEC_FUN ::= IDENTIFICADOR IGUAL RFUNCTION PARIZQ L_PARAM_FORM PARDER BLOQUE 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Declaracion> l = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new DecFuncion(id,l,b,idleft,idright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC_FUN",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DEC_FUN ::= IDENTIFICADOR IGUAL PARIZQ L_PARAM_FORM PARDER FLECHA BLOQUE 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Declaracion> l = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new DecFuncion(id,l,b,idleft,idright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC_FUN",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DEC_FUN ::= IDENTIFICADOR IGUAL RFUNCTION PARIZQ PARDER BLOQUE 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new DecFuncion(id,new LinkedList<Declaracion>(),b,idleft,idright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC_FUN",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DEC_FUN ::= IDENTIFICADOR IGUAL PARIZQ PARDER FLECHA BLOQUE 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new DecFuncion(id,new LinkedList<Declaracion>(),b,idleft,idright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC_FUN",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CALL_FUN ::= IDENTIFICADOR PARIZQ L_PARAM_ACT PARDER 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Expresion> e = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = ReturnCallFun(id,e,idleft,idright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CALL_FUN",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CALL_FUN ::= IDENTIFICADOR PARIZQ PARDER 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = ReturnCallFun(id,new LinkedList<Expresion>(),idleft,idright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CALL_FUN",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // L_PARAM_ACT ::= L_PARAM_ACT COMA PARAM_ACT 
            {
              LinkedList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Expresion> l = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion p = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = l; RESULT.add(p);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_PARAM_ACT",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // L_PARAM_ACT ::= PARAM_ACT 
            {
              LinkedList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_PARAM_ACT",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAM_ACT ::= RDEFAULT 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM_ACT",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAM_ACT ::= EXP 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM_ACT",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // L_PARAM_FORM ::= L_PARAM_FORM COMA PARAM_FORM 
            {
              LinkedList<Declaracion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Declaracion> l = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion p = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = l; RESULT.add((Declaracion)p);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_PARAM_FORM",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // L_PARAM_FORM ::= PARAM_FORM 
            {
              LinkedList<Declaracion> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion p = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add((Declaracion)p);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_PARAM_FORM",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARAM_FORM ::= IDENTIFICADOR 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Declaracion(id,idleft,idright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM_FORM",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARAM_FORM ::= IDENTIFICADOR IGUAL EXP 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Declaracion(id,e,idleft,idright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM_FORM",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DOWHILE ::= RDO BLOQUE RWHILE PARIZQ EXP PARDER PTCOMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DOWHILE",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DOWHILE ::= RDO BLOQUE RWHILE PARIZQ EXP PARDER 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DOWHILE",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FOR ::= RFOR PARIZQ IDENTIFICADOR RIN EXP PARDER BLOQUE 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGNACION ::= IDENTIFICADOR IGUAL EXP PTCOMA 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Asignacion(ileft,iright,i,e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIGNACION ::= IDENTIFICADOR IGUAL EXP 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Asignacion(ileft,iright,i,e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIGNACION ::= ACCESO IGUAL EXP 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new AccesoAsig((AccesoGet)a,e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIGNACION ::= ACCESO IGUAL EXP PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new AccesoAsig((AccesoGet)a,e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IF ::= RIF PARIZQ EXP PARDER BLOQUE 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Si(e,b,eleft,eright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF ::= RIF PARIZQ EXP PARDER BLOQUE ELSE 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion el = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Si(e,b,(Else)el,eleft,eright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELSE ::= RELSE IF 
            {
              Instruccion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Else((Si)i,rleft,rright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELSE ::= RELSE BLOQUE 
            {
              Instruccion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Else(b,rleft,rright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= EXP OR EXP 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new ExpLogica(e1left,e1right,e1,e2,TipoOpe.OR);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= EXP AND EXP 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new ExpLogica(e1left,e1right,e1,e2,TipoOpe.AND);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= EXP_TERNARIA 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= NOT EXP 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new ExpLogica(e,eleft,eright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= EXP2 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP2 ::= EXP3 MAYOR EXP3 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new ExpRelacional(e1left,e1right,e1,e2,TipoOpe.MAYOR);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP2 ::= EXP3 MENOR EXP3 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new ExpRelacional(e1left,e1right,e1,e2,TipoOpe.MENOR);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP2 ::= EXP3 MENORIGUAL EXP3 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new ExpRelacional(e1left,e1right,e1,e2,TipoOpe.MENORIGUAL);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP2 ::= EXP3 MAYORIGUAL EXP3 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new ExpRelacional(e1left,e1right,e1,e2,TipoOpe.MAYORIGUAL);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP2 ::= EXP3 IGUALQUE EXP3 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new ExpRelacional(e1left,e1right,e1,e2,TipoOpe.IGUALQUE);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP2 ::= EXP3 DIFERENTE EXP3 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new ExpRelacional(e1left,e1right,e1,e2,TipoOpe.DIFERENTE);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP2 ::= EXP3 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP3 ::= MENOS EXP3 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new ExpAritmetica(e1,e1left,e1right);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP3 ::= EXP3 MAS EXP3 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new ExpAritmetica(e1left,e1right,e1,e2,TipoOpe.SUMA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP3 ::= EXP3 MENOS EXP3 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new ExpAritmetica(e1left,e1right,e1,e2,TipoOpe.RESTA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP3 ::= EXP3 POR EXP3 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new ExpAritmetica(e1left,e1right,e1,e2,TipoOpe.MULT);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP3 ::= EXP3 DIV EXP3 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new ExpAritmetica(e1left,e1right,e1,e2,TipoOpe.DIV);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP3 ::= EXP3 POT EXP3 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new ExpAritmetica(e1left,e1right,e1,e2,TipoOpe.POT);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP3 ::= EXP3 MOD EXP3 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new ExpAritmetica(e1left,e1right,e1,e2,TipoOpe.MOD);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP3 ::= CALL_FUN 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = c;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP3 ::= PARIZQ EXP PARDER 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP3 ::= PRIMITIVO 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP3 ::= EXP3 L_INDEX 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Indice> l = (LinkedList<Indice>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new AccesoGet(e,l);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP3 ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Identificador(id,idleft,idright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP3 ::= RNULL 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PRIMITIVO ::= ENTERO 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Primitivo(eleft,eright,Integer.parseInt(e));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PRIMITIVO ::= CADENA 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Primitivo(eleft,eright,e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PRIMITIVO ::= DECIMAL 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Primitivo(eleft,eright,Double.parseDouble(e));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PRIMITIVO ::= RFALSE 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Primitivo(eleft,eright,false);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PRIMITIVO ::= RTRUE 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Primitivo(eleft,eright,true);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP_TERNARIA ::= EXP TERNARIO EXP DOSPUNTOS EXP 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_TERNARIA",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ACCESO ::= IDENTIFICADOR L_INDEX 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Indice> l = (LinkedList<Indice>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new AccesoGet(new Identificador(id,idleft,idright),l);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // L_INDEX ::= L_INDEX INDEX 
            {
              LinkedList<Indice> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Indice> l = (LinkedList<Indice>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Indice i = (Indice)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		l.add(i); RESULT = l;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_INDEX",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // L_INDEX ::= INDEX 
            {
              LinkedList<Indice> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Indice i = (Indice)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(i);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_INDEX",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INDEX ::= CORIZQ EXP CORDER 
            {
              Indice RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Indice(e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INDEX",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INDEX ::= DCORIZQ EXP DCORDER 
            {
              Indice RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Indice(e,false);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INDEX",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
